
SubsystemOneLEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006730  08006730  00007730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c8  080067c8  00008080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067c8  080067c8  000077c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d0  080067d0  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d0  080067d0  000077d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067d4  080067d4  000077d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080067d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000080  08006858  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08006858  00008380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001112d  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002138  00000000  00000000  000191dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0001b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d35  00000000  00000000  0001c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027118  00000000  00000000  0001d125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ddb  00000000  00000000  0004423d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4b84  00000000  00000000  00057018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bb9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc8  00000000  00000000  0014bbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001508a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006718 	.word	0x08006718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006718 	.word	0x08006718

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <SPI_Transfer>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

//SPI Transmission Helper Function
uint8_t SPI_Transfer(uint8_t data) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08c      	sub	sp, #48	@ 0x30
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
    uint8_t received = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    HAL_SPI_TransmitReceive(&hspi1, &data, &received, 1, HAL_MAX_DELAY);
 80005bc:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 80005c0:	1df9      	adds	r1, r7, #7
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2301      	movs	r3, #1
 80005ca:	4804      	ldr	r0, [pc, #16]	@ (80005dc <SPI_Transfer+0x30>)
 80005cc:	f003 fa1d 	bl	8003a0a <HAL_SPI_TransmitReceive>
    char debug_buf[30];
//    sprintf(debug_buf, "SPI Sent: %02X, Got: %02X\n", data, received);
//    HAL_UART_Transmit(&huart2, (uint8_t *)debug_buf, strlen(debug_buf), HAL_MAX_DELAY);
    return received;
 80005d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3728      	adds	r7, #40	@ 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000009c 	.word	0x2000009c

080005e0 <nRF24_WriteRegister>:

void nRF24_WriteRegister(uint8_t reg, uint8_t value) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	4613      	mov	r3, r2
 80005ee:	71bb      	strb	r3, [r7, #6]
    CSN_LOW();  // Select the nRF24L01
 80005f0:	2200      	movs	r2, #0
 80005f2:	2140      	movs	r1, #64	@ 0x40
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <nRF24_WriteRegister+0x4c>)
 80005f6:	f001 fb67 	bl	8001cc8 <HAL_GPIO_WritePin>
    SPI_Transfer(0x20 | (reg & 0x1F));  // Write command (0x20 + Register Address)
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	f003 031f 	and.w	r3, r3, #31
 8000602:	b25b      	sxtb	r3, r3
 8000604:	f043 0320 	orr.w	r3, r3, #32
 8000608:	b25b      	sxtb	r3, r3
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffcd 	bl	80005ac <SPI_Transfer>
    SPI_Transfer(value);  // Send data
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffc9 	bl	80005ac <SPI_Transfer>
    CSN_HIGH(); // Deselect
 800061a:	2201      	movs	r2, #1
 800061c:	2140      	movs	r1, #64	@ 0x40
 800061e:	4803      	ldr	r0, [pc, #12]	@ (800062c <nRF24_WriteRegister+0x4c>)
 8000620:	f001 fb52 	bl	8001cc8 <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	48000400 	.word	0x48000400

08000630 <nRF24_WriteRegisterMulti>:

void nRF24_WriteRegisterMulti(uint8_t reg, uint8_t *data, uint8_t length) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]
    CSN_LOW();  // Select nRF24L01
 8000640:	2200      	movs	r2, #0
 8000642:	2140      	movs	r1, #64	@ 0x40
 8000644:	480f      	ldr	r0, [pc, #60]	@ (8000684 <nRF24_WriteRegisterMulti+0x54>)
 8000646:	f001 fb3f 	bl	8001cc8 <HAL_GPIO_WritePin>
    SPI_Transfer(0x20 | (reg & 0x1F));  // Write command
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	f003 031f 	and.w	r3, r3, #31
 8000652:	b25b      	sxtb	r3, r3
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	b25b      	sxtb	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ffa5 	bl	80005ac <SPI_Transfer>
    HAL_SPI_Transmit(&hspi1, data, length, HAL_MAX_DELAY);
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	b29a      	uxth	r2, r3
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	4806      	ldr	r0, [pc, #24]	@ (8000688 <nRF24_WriteRegisterMulti+0x58>)
 800066e:	f002 ff1e 	bl	80034ae <HAL_SPI_Transmit>
    CSN_HIGH();  // Deselect
 8000672:	2201      	movs	r2, #1
 8000674:	2140      	movs	r1, #64	@ 0x40
 8000676:	4803      	ldr	r0, [pc, #12]	@ (8000684 <nRF24_WriteRegisterMulti+0x54>)
 8000678:	f001 fb26 	bl	8001cc8 <HAL_GPIO_WritePin>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	48000400 	.word	0x48000400
 8000688:	2000009c 	.word	0x2000009c

0800068c <nRF24_ReadRegister>:

uint8_t nRF24_ReadRegister(uint8_t reg) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
    CSN_LOW();  // Select the nRF24L01
 8000696:	2200      	movs	r2, #0
 8000698:	2140      	movs	r1, #64	@ 0x40
 800069a:	480c      	ldr	r0, [pc, #48]	@ (80006cc <nRF24_ReadRegister+0x40>)
 800069c:	f001 fb14 	bl	8001cc8 <HAL_GPIO_WritePin>
    SPI_Transfer(reg & 0x1F);  // Read command (0x00 + Register Address)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 031f 	and.w	r3, r3, #31
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff7f 	bl	80005ac <SPI_Transfer>
    uint8_t value = SPI_Transfer(0xFF);  // Receive data
 80006ae:	20ff      	movs	r0, #255	@ 0xff
 80006b0:	f7ff ff7c 	bl	80005ac <SPI_Transfer>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]
    CSN_HIGH();  // Deselect
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	@ 0x40
 80006bc:	4803      	ldr	r0, [pc, #12]	@ (80006cc <nRF24_ReadRegister+0x40>)
 80006be:	f001 fb03 	bl	8001cc8 <HAL_GPIO_WritePin>
    return value;
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	48000400 	.word	0x48000400

080006d0 <nRF24_ReadPayload>:
    SPI_Transfer(0xA0);  // Write Payload Command
    HAL_SPI_Transmit(&hspi1, data, length, HAL_MAX_DELAY);
    CSN_HIGH();  // Deselect
}

void nRF24_ReadPayload(uint8_t *data, uint8_t length) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
    CSN_LOW();  // Select nRF24L01
 80006dc:	2200      	movs	r2, #0
 80006de:	2140      	movs	r1, #64	@ 0x40
 80006e0:	480b      	ldr	r0, [pc, #44]	@ (8000710 <nRF24_ReadPayload+0x40>)
 80006e2:	f001 faf1 	bl	8001cc8 <HAL_GPIO_WritePin>
    SPI_Transfer(0x61);  // Read Payload Command
 80006e6:	2061      	movs	r0, #97	@ 0x61
 80006e8:	f7ff ff60 	bl	80005ac <SPI_Transfer>
    HAL_SPI_Receive(&hspi1, data, length, HAL_MAX_DELAY);
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	4807      	ldr	r0, [pc, #28]	@ (8000714 <nRF24_ReadPayload+0x44>)
 80006f8:	f003 f84f 	bl	800379a <HAL_SPI_Receive>
    CSN_HIGH();  // Deselect
 80006fc:	2201      	movs	r2, #1
 80006fe:	2140      	movs	r1, #64	@ 0x40
 8000700:	4803      	ldr	r0, [pc, #12]	@ (8000710 <nRF24_ReadPayload+0x40>)
 8000702:	f001 fae1 	bl	8001cc8 <HAL_GPIO_WritePin>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	48000400 	.word	0x48000400
 8000714:	2000009c 	.word	0x2000009c

08000718 <nRF24_Init>:
    CE_LOW();  // Stop transmission
}


//Initialize Transmitter
void nRF24_Init() {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    CE_LOW();  // Disable radio
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000722:	4810      	ldr	r0, [pc, #64]	@ (8000764 <nRF24_Init+0x4c>)
 8000724:	f001 fad0 	bl	8001cc8 <HAL_GPIO_WritePin>
    CSN_HIGH();  // Deselect SPI
 8000728:	2201      	movs	r2, #1
 800072a:	2140      	movs	r1, #64	@ 0x40
 800072c:	480d      	ldr	r0, [pc, #52]	@ (8000764 <nRF24_Init+0x4c>)
 800072e:	f001 facb 	bl	8001cc8 <HAL_GPIO_WritePin>

    nRF24_WriteRegister(0x00, 0x0A);  // Set PWR_UP, CRC enabled
 8000732:	210a      	movs	r1, #10
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ff53 	bl	80005e0 <nRF24_WriteRegister>
    nRF24_WriteRegister(0x01, 0x3F);  // Enable Auto Acknowledgment
 800073a:	213f      	movs	r1, #63	@ 0x3f
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff4f 	bl	80005e0 <nRF24_WriteRegister>
    nRF24_WriteRegister(0x02, 0x01);  // Enable only Pipe 0
 8000742:	2101      	movs	r1, #1
 8000744:	2002      	movs	r0, #2
 8000746:	f7ff ff4b 	bl	80005e0 <nRF24_WriteRegister>
    nRF24_WriteRegister(0x05, 0x02);  // Set RF Channel (Change as needed)
 800074a:	2102      	movs	r1, #2
 800074c:	2005      	movs	r0, #5
 800074e:	f7ff ff47 	bl	80005e0 <nRF24_WriteRegister>
    nRF24_WriteRegister(0x06, 0x07);  // Set RF Power 0dBm, 1Mbps
 8000752:	2107      	movs	r1, #7
 8000754:	2006      	movs	r0, #6
 8000756:	f7ff ff43 	bl	80005e0 <nRF24_WriteRegister>

    HAL_Delay(2);  // Wait for power-up
 800075a:	2002      	movs	r0, #2
 800075c:	f000 ffd4 	bl	8001708 <HAL_Delay>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	48000400 	.word	0x48000400

08000768 <nRF24_SetRXMode>:

//Establish Transmitter as Receiver
void nRF24_SetRXMode() {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
    uint8_t rx_addr[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };  // Must match TX
 800076e:	4a1a      	ldr	r2, [pc, #104]	@ (80007d8 <nRF24_SetRXMode+0x70>)
 8000770:	463b      	mov	r3, r7
 8000772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000776:	6018      	str	r0, [r3, #0]
 8000778:	3304      	adds	r3, #4
 800077a:	7019      	strb	r1, [r3, #0]

    CE_LOW();
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000782:	4816      	ldr	r0, [pc, #88]	@ (80007dc <nRF24_SetRXMode+0x74>)
 8000784:	f001 faa0 	bl	8001cc8 <HAL_GPIO_WritePin>
    nRF24_WriteRegister(0x00, 0x0F);  // PWR_UP | PRIM_RX
 8000788:	210f      	movs	r1, #15
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff28 	bl	80005e0 <nRF24_WriteRegister>
    nRF24_WriteRegister(0x02, 0x01);  // Enable Pipe 0
 8000790:	2101      	movs	r1, #1
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff ff24 	bl	80005e0 <nRF24_WriteRegister>
    nRF24_WriteRegisterMulti(0x0A, rx_addr, 5);  // Set RX address
 8000798:	463b      	mov	r3, r7
 800079a:	2205      	movs	r2, #5
 800079c:	4619      	mov	r1, r3
 800079e:	200a      	movs	r0, #10
 80007a0:	f7ff ff46 	bl	8000630 <nRF24_WriteRegisterMulti>
    nRF24_WriteRegister(0x11, 1);  // Set static payload length
 80007a4:	2101      	movs	r1, #1
 80007a6:	2011      	movs	r0, #17
 80007a8:	f7ff ff1a 	bl	80005e0 <nRF24_WriteRegister>
    nRF24_WriteRegister(0x1C, 0x00);  // Disable dynamic payload
 80007ac:	2100      	movs	r1, #0
 80007ae:	201c      	movs	r0, #28
 80007b0:	f7ff ff16 	bl	80005e0 <nRF24_WriteRegister>
    nRF24_WriteRegister(0x1D, 0x00);  // Disable features
 80007b4:	2100      	movs	r1, #0
 80007b6:	201d      	movs	r0, #29
 80007b8:	f7ff ff12 	bl	80005e0 <nRF24_WriteRegister>
    HAL_Delay(2);
 80007bc:	2002      	movs	r0, #2
 80007be:	f000 ffa3 	bl	8001708 <HAL_Delay>
    CE_HIGH();  // Enable RX mode
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <nRF24_SetRXMode+0x74>)
 80007ca:	f001 fa7d 	bl	8001cc8 <HAL_GPIO_WritePin>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	08006730 	.word	0x08006730
 80007dc:	48000400 	.word	0x48000400

080007e0 <nRF24_DataAvailable>:

uint8_t nRF24_DataAvailable() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
    uint8_t status = nRF24_ReadRegister(0x07);  // Read STATUS register
 80007e6:	2007      	movs	r0, #7
 80007e8:	f7ff ff50 	bl	800068c <nRF24_ReadRegister>
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
    if (status & (1 << 6)) {  // RX_DR is set
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d005      	beq.n	8000806 <nRF24_DataAvailable+0x26>
        nRF24_WriteRegister(0x07, (1 << 6));  // Clear RX_DR flag
 80007fa:	2140      	movs	r1, #64	@ 0x40
 80007fc:	2007      	movs	r0, #7
 80007fe:	f7ff feef 	bl	80005e0 <nRF24_WriteRegister>
        return 1;  // Data available
 8000802:	2301      	movs	r3, #1
 8000804:	e000      	b.n	8000808 <nRF24_DataAvailable+0x28>
    }
    return 0;  // No data
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <noInput>:

//Stop motion
void noInput() {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <noInput+0x4c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000826:	f001 fa4f 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	480c      	ldr	r0, [pc, #48]	@ (8000860 <noInput+0x50>)
 8000830:	f001 fa4a 	bl	8001cc8 <HAL_GPIO_WritePin>

	m1_dc = .035;
 8000834:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <noInput+0x54>)
 8000836:	4a0c      	ldr	r2, [pc, #48]	@ (8000868 <noInput+0x58>)
 8000838:	601a      	str	r2, [r3, #0]
	m2_dc = .035;
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <noInput+0x5c>)
 800083c:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <noInput+0x58>)
 800083e:	601a      	str	r2, [r3, #0]
	mod_1 = .0025;
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <noInput+0x60>)
 8000842:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <noInput+0x64>)
 8000844:	601a      	str	r2, [r3, #0]
	mod_2 = .0025;
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <noInput+0x68>)
 8000848:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <noInput+0x64>)
 800084a:	601a      	str	r2, [r3, #0]
	m1_factor = 0;
 800084c:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <noInput+0x6c>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
	m2_factor = 0;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <noInput+0x70>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000014c 	.word	0x2000014c
 8000860:	48000800 	.word	0x48000800
 8000864:	20000014 	.word	0x20000014
 8000868:	3d0f5c29 	.word	0x3d0f5c29
 800086c:	20000018 	.word	0x20000018
 8000870:	2000001c 	.word	0x2000001c
 8000874:	3b23d70a 	.word	0x3b23d70a
 8000878:	20000020 	.word	0x20000020
 800087c:	20000224 	.word	0x20000224
 8000880:	20000228 	.word	0x20000228

08000884 <leftInput>:

//'Wave' Left
void leftInput() {
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <leftInput+0x50>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f001 fa15 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2180      	movs	r1, #128	@ 0x80
 80008a2:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <leftInput+0x54>)
 80008a4:	f001 fa10 	bl	8001cc8 <HAL_GPIO_WritePin>

	m1_dc = .095;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <leftInput+0x58>)
 80008aa:	4a0d      	ldr	r2, [pc, #52]	@ (80008e0 <leftInput+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
	m2_dc = .095;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <leftInput+0x60>)
 80008b0:	4a0b      	ldr	r2, [pc, #44]	@ (80008e0 <leftInput+0x5c>)
 80008b2:	601a      	str	r2, [r3, #0]
	mod_1 = .0;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <leftInput+0x64>)
 80008b6:	f04f 0200 	mov.w	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
	mod_2 = .0025;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <leftInput+0x68>)
 80008be:	4a0c      	ldr	r2, [pc, #48]	@ (80008f0 <leftInput+0x6c>)
 80008c0:	601a      	str	r2, [r3, #0]
	m1_factor = 0;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <leftInput+0x70>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
	m2_factor = 1;
 80008c8:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <leftInput+0x74>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	601a      	str	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000014c 	.word	0x2000014c
 80008d8:	48000800 	.word	0x48000800
 80008dc:	20000014 	.word	0x20000014
 80008e0:	3dc28f5c 	.word	0x3dc28f5c
 80008e4:	20000018 	.word	0x20000018
 80008e8:	2000001c 	.word	0x2000001c
 80008ec:	20000020 	.word	0x20000020
 80008f0:	3b23d70a 	.word	0x3b23d70a
 80008f4:	20000224 	.word	0x20000224
 80008f8:	20000228 	.word	0x20000228

080008fc <rightInput>:

//'Wave' Right
void rightInput() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <rightInput+0x50>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2200      	movs	r2, #0
 8000906:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800090e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000912:	f001 f9d9 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2180      	movs	r1, #128	@ 0x80
 800091a:	480d      	ldr	r0, [pc, #52]	@ (8000950 <rightInput+0x54>)
 800091c:	f001 f9d4 	bl	8001cc8 <HAL_GPIO_WritePin>

	m1_dc = .095;
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <rightInput+0x58>)
 8000922:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <rightInput+0x5c>)
 8000924:	601a      	str	r2, [r3, #0]
	m2_dc = .095;
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <rightInput+0x60>)
 8000928:	4a0b      	ldr	r2, [pc, #44]	@ (8000958 <rightInput+0x5c>)
 800092a:	601a      	str	r2, [r3, #0]
	mod_1 = .0025;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <rightInput+0x64>)
 800092e:	4a0d      	ldr	r2, [pc, #52]	@ (8000964 <rightInput+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
	mod_2 = 0;
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <rightInput+0x6c>)
 8000934:	f04f 0200 	mov.w	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
	m1_factor = 1;
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <rightInput+0x70>)
 800093c:	2201      	movs	r2, #1
 800093e:	601a      	str	r2, [r3, #0]
	m2_factor = 0;
 8000940:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <rightInput+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000014c 	.word	0x2000014c
 8000950:	48000800 	.word	0x48000800
 8000954:	20000014 	.word	0x20000014
 8000958:	3dc28f5c 	.word	0x3dc28f5c
 800095c:	20000018 	.word	0x20000018
 8000960:	2000001c 	.word	0x2000001c
 8000964:	3b23d70a 	.word	0x3b23d70a
 8000968:	20000020 	.word	0x20000020
 800096c:	20000224 	.word	0x20000224
 8000970:	20000228 	.word	0x20000228

08000974 <upInput>:

//Move Forward
void upInput() {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 110);
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <upInput+0x4c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	226e      	movs	r2, #110	@ 0x6e
 800097e:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098a:	f001 f99d 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <upInput+0x50>)
 8000994:	f001 f998 	bl	8001cc8 <HAL_GPIO_WritePin>

	m1_dc = .035;
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <upInput+0x54>)
 800099a:	4a0c      	ldr	r2, [pc, #48]	@ (80009cc <upInput+0x58>)
 800099c:	601a      	str	r2, [r3, #0]
	m2_dc = .095;
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <upInput+0x5c>)
 80009a0:	4a0c      	ldr	r2, [pc, #48]	@ (80009d4 <upInput+0x60>)
 80009a2:	601a      	str	r2, [r3, #0]
	mod_1 = .0025;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <upInput+0x64>)
 80009a6:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <upInput+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
	mod_2 = .0025;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <upInput+0x6c>)
 80009ac:	4a0b      	ldr	r2, [pc, #44]	@ (80009dc <upInput+0x68>)
 80009ae:	601a      	str	r2, [r3, #0]
	m1_factor = 0;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <upInput+0x70>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
	m2_factor = 0;
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <upInput+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000014c 	.word	0x2000014c
 80009c4:	48000800 	.word	0x48000800
 80009c8:	20000014 	.word	0x20000014
 80009cc:	3d0f5c29 	.word	0x3d0f5c29
 80009d0:	20000018 	.word	0x20000018
 80009d4:	3dc28f5c 	.word	0x3dc28f5c
 80009d8:	2000001c 	.word	0x2000001c
 80009dc:	3b23d70a 	.word	0x3b23d70a
 80009e0:	20000020 	.word	0x20000020
 80009e4:	20000224 	.word	0x20000224
 80009e8:	20000228 	.word	0x20000228

080009ec <downInput>:

//Move Backwards
void downInput() {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 80);
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <downInput+0x4c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2250      	movs	r2, #80	@ 0x50
 80009f6:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a02:	f001 f961 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2180      	movs	r1, #128	@ 0x80
 8000a0a:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <downInput+0x50>)
 8000a0c:	f001 f95c 	bl	8001cc8 <HAL_GPIO_WritePin>

	m1_dc = .035;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <downInput+0x54>)
 8000a12:	4a0c      	ldr	r2, [pc, #48]	@ (8000a44 <downInput+0x58>)
 8000a14:	601a      	str	r2, [r3, #0]
	m2_dc = .095;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <downInput+0x5c>)
 8000a18:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <downInput+0x60>)
 8000a1a:	601a      	str	r2, [r3, #0]
	mod_1 = .0025;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <downInput+0x64>)
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <downInput+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
	mod_2 = .0025;
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <downInput+0x6c>)
 8000a24:	4a0b      	ldr	r2, [pc, #44]	@ (8000a54 <downInput+0x68>)
 8000a26:	601a      	str	r2, [r3, #0]
	m1_factor = 0;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <downInput+0x70>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
	m2_factor = 0;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <downInput+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2000014c 	.word	0x2000014c
 8000a3c:	48000800 	.word	0x48000800
 8000a40:	20000014 	.word	0x20000014
 8000a44:	3d0f5c29 	.word	0x3d0f5c29
 8000a48:	20000018 	.word	0x20000018
 8000a4c:	3dc28f5c 	.word	0x3dc28f5c
 8000a50:	2000001c 	.word	0x2000001c
 8000a54:	3b23d70a 	.word	0x3b23d70a
 8000a58:	20000020 	.word	0x20000020
 8000a5c:	20000224 	.word	0x20000224
 8000a60:	20000228 	.word	0x20000228

08000a64 <nRF24_ReceiveData>:

//Receiver main loop
void nRF24_ReceiveData() {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	@ 0x38
 8000a68:	af00      	add	r7, sp, #0
    uint8_t rxData[1];

    if (nRF24_DataAvailable()) {
 8000a6a:	f7ff feb9 	bl	80007e0 <nRF24_DataAvailable>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d049      	beq.n	8000b08 <nRF24_ReceiveData+0xa4>
        nRF24_ReadPayload(rxData, 1);
 8000a74:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fe28 	bl	80006d0 <nRF24_ReadPayload>
        nRF24_WriteRegister(0x07, (1 << 6));  // Clear RX_DR
 8000a80:	2140      	movs	r1, #64	@ 0x40
 8000a82:	2007      	movs	r0, #7
 8000a84:	f7ff fdac 	bl	80005e0 <nRF24_WriteRegister>

        char uart_buf[50];
        sprintf(uart_buf, "Received: %02X\n\r", rxData[0]);
 8000a88:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	463b      	mov	r3, r7
 8000a90:	491f      	ldr	r1, [pc, #124]	@ (8000b10 <nRF24_ReceiveData+0xac>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f005 f9a0 	bl	8005dd8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), HAL_MAX_DELAY); //Print received value to serial monitor
 8000a98:	463b      	mov	r3, r7
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fb98 	bl	80001d0 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	481a      	ldr	r0, [pc, #104]	@ (8000b14 <nRF24_ReceiveData+0xb0>)
 8000aac:	f004 fc36 	bl	800531c <HAL_UART_Transmit>

        if (rxData[0] != lastState) { //Don't call the same case multiple times in a row or no motion would occur
 8000ab0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <nRF24_ReceiveData+0xb4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d024      	beq.n	8000b08 <nRF24_ReceiveData+0xa4>
        	switch(rxData[0]) {
 8000abe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d81b      	bhi.n	8000afe <nRF24_ReceiveData+0x9a>
 8000ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8000acc <nRF24_ReceiveData+0x68>)
 8000ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000acc:	08000ae1 	.word	0x08000ae1
 8000ad0:	08000ae7 	.word	0x08000ae7
 8000ad4:	08000aed 	.word	0x08000aed
 8000ad8:	08000af3 	.word	0x08000af3
 8000adc:	08000af9 	.word	0x08000af9
				case 0:
					noInput();
 8000ae0:	f7ff fe96 	bl	8000810 <noInput>
					break;
 8000ae4:	e00b      	b.n	8000afe <nRF24_ReceiveData+0x9a>
				case 1:
					leftInput();
 8000ae6:	f7ff fecd 	bl	8000884 <leftInput>
					break;
 8000aea:	e008      	b.n	8000afe <nRF24_ReceiveData+0x9a>
				case 2:
					rightInput();
 8000aec:	f7ff ff06 	bl	80008fc <rightInput>
					break;
 8000af0:	e005      	b.n	8000afe <nRF24_ReceiveData+0x9a>
				case 3:
					upInput();
 8000af2:	f7ff ff3f 	bl	8000974 <upInput>
					break;
 8000af6:	e002      	b.n	8000afe <nRF24_ReceiveData+0x9a>
				case 4:
					downInput();
 8000af8:	f7ff ff78 	bl	80009ec <downInput>
					break;
 8000afc:	bf00      	nop
			}
        	lastState = rxData[0]; //Set last state
 8000afe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <nRF24_ReceiveData+0xb4>)
 8000b06:	601a      	str	r2, [r3, #0]
        }



    }
}
 8000b08:	bf00      	nop
 8000b0a:	3738      	adds	r7, #56	@ 0x38
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	08006738 	.word	0x08006738
 8000b14:	20000198 	.word	0x20000198
 8000b18:	2000022c 	.word	0x2000022c

08000b1c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Blue button callback to allow for motor testing without using transmitter
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
	testingMode++;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x40>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x40>)
 8000b2e:	6013      	str	r3, [r2, #0]
	testingMode = testingMode % 2;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	bfb8      	it	lt
 8000b3c:	425b      	neglt	r3, r3
 8000b3e:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x40>)
 8000b40:	6013      	str	r3, [r2, #0]

	if (testingMode == 0){
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x40>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <HAL_GPIO_EXTI_Callback+0x34>
		noInput();
 8000b4a:	f7ff fe61 	bl	8000810 <noInput>
	} else {
		upInput();
	}
}
 8000b4e:	e001      	b.n	8000b54 <HAL_GPIO_EXTI_Callback+0x38>
		upInput();
 8000b50:	f7ff ff10 	bl	8000974 <upInput>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000220 	.word	0x20000220

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fd53 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f8e1 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 fa97 	bl	80010a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b72:	f000 fa65 	bl	8001040 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000b76:	f000 f92d 	bl	8000dd4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000b7a:	f000 f969 	bl	8000e50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b7e:	f000 f9e9 	bl	8000f54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b82:	2100      	movs	r1, #0
 8000b84:	4859      	ldr	r0, [pc, #356]	@ (8000cec <main+0x18c>)
 8000b86:	f003 fbd3 	bl	8004330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	4857      	ldr	r0, [pc, #348]	@ (8000cec <main+0x18c>)
 8000b8e:	f003 fbcf 	bl	8004330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b92:	2100      	movs	r1, #0
 8000b94:	4856      	ldr	r0, [pc, #344]	@ (8000cf0 <main+0x190>)
 8000b96:	f003 fbcb 	bl	8004330 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  nRF24_Init();  // Initialize nRF24L01
 8000b9a:	f7ff fdbd 	bl	8000718 <nRF24_Init>
  nRF24_SetRXMode();  // Set RX Mode
 8000b9e:	f7ff fde3 	bl	8000768 <nRF24_SetRXMode>

  //Turn DC motor on, set to locked state
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	4853      	ldr	r0, [pc, #332]	@ (8000cf4 <main+0x194>)
 8000ba8:	f001 f88e 	bl	8001cc8 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 110);
 8000bac:	4b50      	ldr	r3, [pc, #320]	@ (8000cf0 <main+0x190>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	226e      	movs	r2, #110	@ 0x6e
 8000bb2:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbe:	f001 f883 	bl	8001cc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	484c      	ldr	r0, [pc, #304]	@ (8000cf8 <main+0x198>)
 8000bc8:	f001 f87e 	bl	8001cc8 <HAL_GPIO_WritePin>

  while (1)
  {
	  HAL_Delay(50);
 8000bcc:	2032      	movs	r0, #50	@ 0x32
 8000bce:	f000 fd9b 	bl	8001708 <HAL_Delay>

	  //Set new values for servos based on duty cycle and PWM period
	  float pulse_1 = m1_dc * period;
 8000bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8000cfc <main+0x19c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	ee07 3a90 	vmov	s15, r3
 8000bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bde:	4b48      	ldr	r3, [pc, #288]	@ (8000d00 <main+0x1a0>)
 8000be0:	edd3 7a00 	vldr	s15, [r3]
 8000be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000be8:	edc7 7a01 	vstr	s15, [r7, #4]
	  float pulse_2 = m2_dc * period;
 8000bec:	4b43      	ldr	r3, [pc, #268]	@ (8000cfc <main+0x19c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf8:	4b42      	ldr	r3, [pc, #264]	@ (8000d04 <main+0x1a4>)
 8000bfa:	edd3 7a00 	vldr	s15, [r3]
 8000bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c02:	edc7 7a00 	vstr	s15, [r7]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (int)pulse_1);
 8000c06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c0e:	4b37      	ldr	r3, [pc, #220]	@ (8000cec <main+0x18c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	ee17 2a90 	vmov	r2, s15
 8000c16:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, (int)pulse_2);
 8000c18:	edd7 7a00 	vldr	s15, [r7]
 8000c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c20:	4b32      	ldr	r3, [pc, #200]	@ (8000cec <main+0x18c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	ee17 2a90 	vmov	r2, s15
 8000c28:	63da      	str	r2, [r3, #60]	@ 0x3c

	  //Check if servo 1 has reached an endpoint
	  if (m1_dc >= max1) {
 8000c2a:	4b35      	ldr	r3, [pc, #212]	@ (8000d00 <main+0x1a0>)
 8000c2c:	ed93 7a00 	vldr	s14, [r3]
 8000c30:	4b35      	ldr	r3, [pc, #212]	@ (8000d08 <main+0x1a8>)
 8000c32:	edd3 7a00 	vldr	s15, [r3]
 8000c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3e:	db02      	blt.n	8000c46 <main+0xe6>
		  mod_1 = -0.0025;
 8000c40:	4b32      	ldr	r3, [pc, #200]	@ (8000d0c <main+0x1ac>)
 8000c42:	4a33      	ldr	r2, [pc, #204]	@ (8000d10 <main+0x1b0>)
 8000c44:	601a      	str	r2, [r3, #0]
	  }
	  if (m1_dc <= min1) {
 8000c46:	4b2e      	ldr	r3, [pc, #184]	@ (8000d00 <main+0x1a0>)
 8000c48:	ed93 7a00 	vldr	s14, [r3]
 8000c4c:	4b31      	ldr	r3, [pc, #196]	@ (8000d14 <main+0x1b4>)
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5a:	d802      	bhi.n	8000c62 <main+0x102>
		  mod_1 = 0.0025;
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d0c <main+0x1ac>)
 8000c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d18 <main+0x1b8>)
 8000c60:	601a      	str	r2, [r3, #0]
	  }

	  //Check if servo 2 has reached an endpoint
	  if (m2_dc >= max2) {
 8000c62:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <main+0x1a4>)
 8000c64:	ed93 7a00 	vldr	s14, [r3]
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <main+0x1bc>)
 8000c6a:	edd3 7a00 	vldr	s15, [r3]
 8000c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c76:	db02      	blt.n	8000c7e <main+0x11e>
		  mod_2 = -0.0025;
 8000c78:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <main+0x1c0>)
 8000c7a:	4a25      	ldr	r2, [pc, #148]	@ (8000d10 <main+0x1b0>)
 8000c7c:	601a      	str	r2, [r3, #0]
	  }
	  if (m2_dc <= min2) {
 8000c7e:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <main+0x1a4>)
 8000c80:	ed93 7a00 	vldr	s14, [r3]
 8000c84:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <main+0x1c4>)
 8000c86:	edd3 7a00 	vldr	s15, [r3]
 8000c8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	d802      	bhi.n	8000c9a <main+0x13a>
		  mod_2 = 0.0025;
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <main+0x1c0>)
 8000c96:	4a20      	ldr	r2, [pc, #128]	@ (8000d18 <main+0x1b8>)
 8000c98:	601a      	str	r2, [r3, #0]
	  }

	  //Increment servo duty cycle for motion
	  m1_dc += mod_1 * m1_factor;
 8000c9a:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <main+0x1c8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <main+0x1ac>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <main+0x1a0>)
 8000cb2:	edd3 7a00 	vldr	s15, [r3]
 8000cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cba:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <main+0x1a0>)
 8000cbc:	edc3 7a00 	vstr	s15, [r3]
	  m2_dc += mod_2 * m2_factor;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <main+0x1cc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	ee07 3a90 	vmov	s15, r3
 8000cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <main+0x1c0>)
 8000cce:	edd3 7a00 	vldr	s15, [r3]
 8000cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <main+0x1a4>)
 8000cd8:	edd3 7a00 	vldr	s15, [r3]
 8000cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <main+0x1a4>)
 8000ce2:	edc3 7a00 	vstr	s15, [r3]

	  nRF24_ReceiveData();  // Continuously check for incoming data
 8000ce6:	f7ff febd 	bl	8000a64 <nRF24_ReceiveData>
  {
 8000cea:	e76f      	b.n	8000bcc <main+0x6c>
 8000cec:	20000100 	.word	0x20000100
 8000cf0:	2000014c 	.word	0x2000014c
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	20000010 	.word	0x20000010
 8000d00:	20000014 	.word	0x20000014
 8000d04:	20000018 	.word	0x20000018
 8000d08:	20000004 	.word	0x20000004
 8000d0c:	2000001c 	.word	0x2000001c
 8000d10:	bb23d70a 	.word	0xbb23d70a
 8000d14:	20000000 	.word	0x20000000
 8000d18:	3b23d70a 	.word	0x3b23d70a
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	20000020 	.word	0x20000020
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000224 	.word	0x20000224
 8000d2c:	20000228 	.word	0x20000228

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b096      	sub	sp, #88	@ 0x58
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	2244      	movs	r2, #68	@ 0x44
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f005 f86c 	bl	8005e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d56:	f000 fff5 	bl	8001d44 <HAL_PWREx_ControlVoltageScaling>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d60:	f000 fa3a 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6e:	2310      	movs	r3, #16
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d72:	2302      	movs	r3, #2
 8000d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d76:	2302      	movs	r3, #2
 8000d78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d7e:	230a      	movs	r3, #10
 8000d80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d82:	2307      	movs	r3, #7
 8000d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 f82c 	bl	8001df0 <HAL_RCC_OscConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d9e:	f000 fa1b 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da2:	230f      	movs	r3, #15
 8000da4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da6:	2303      	movs	r3, #3
 8000da8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	2104      	movs	r1, #4
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fbf4 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dc6:	f000 fa07 	bl	80011d8 <Error_Handler>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3758      	adds	r7, #88	@ 0x58
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000dda:	4a1c      	ldr	r2, [pc, #112]	@ (8000e4c <MX_SPI1_Init+0x78>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000de0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000dee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000df2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e0a:	2218      	movs	r2, #24
 8000e0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e22:	2207      	movs	r2, #7
 8000e24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e34:	f002 fa98 	bl	8003368 <HAL_SPI_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 f9cb 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000009c 	.word	0x2000009c
 8000e4c:	40013000 	.word	0x40013000

08000e50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	@ 0x38
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e82:	4b33      	ldr	r3, [pc, #204]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000e84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000e8a:	4b31      	ldr	r3, [pc, #196]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000e8c:	224f      	movs	r2, #79	@ 0x4f
 8000e8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b2f      	ldr	r3, [pc, #188]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000e96:	4b2e      	ldr	r3, [pc, #184]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000e98:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000e9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eaa:	4829      	ldr	r0, [pc, #164]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000eac:	f003 f988 	bl	80041c0 <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000eb6:	f000 f98f 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4822      	ldr	r0, [pc, #136]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000ec8:	f003 fc4c 	bl	8004764 <HAL_TIM_ConfigClockSource>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ed2:	f000 f981 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ed6:	481e      	ldr	r0, [pc, #120]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000ed8:	f003 f9c9 	bl	800426e <HAL_TIM_PWM_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ee2:	f000 f979 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4816      	ldr	r0, [pc, #88]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000ef6:	f004 f93b 	bl	8005170 <HAL_TIMEx_MasterConfigSynchronization>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f00:	f000 f96a 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f04:	2360      	movs	r3, #96	@ 0x60
 8000f06:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480d      	ldr	r0, [pc, #52]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000f1c:	f003 fb0e 	bl	800453c <HAL_TIM_PWM_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f26:	f000 f957 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000f32:	f003 fb03 	bl	800453c <HAL_TIM_PWM_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000f3c:	f000 f94c 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f40:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <MX_TIM2_Init+0x100>)
 8000f42:	f000 f9e7 	bl	8001314 <HAL_TIM_MspPostInit>

}
 8000f46:	bf00      	nop
 8000f48:	3738      	adds	r7, #56	@ 0x38
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000100 	.word	0x20000100

08000f54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	@ 0x38
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f74:	463b      	mov	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f86:	4b2c      	ldr	r3, [pc, #176]	@ (8001038 <MX_TIM3_Init+0xe4>)
 8000f88:	4a2c      	ldr	r2, [pc, #176]	@ (800103c <MX_TIM3_Init+0xe8>)
 8000f8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <MX_TIM3_Init+0xe4>)
 8000f8e:	2205      	movs	r2, #5
 8000f90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <MX_TIM3_Init+0xe4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000f98:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <MX_TIM3_Init+0xe4>)
 8000f9a:	22ff      	movs	r2, #255	@ 0xff
 8000f9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <MX_TIM3_Init+0xe4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <MX_TIM3_Init+0xe4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000faa:	4823      	ldr	r0, [pc, #140]	@ (8001038 <MX_TIM3_Init+0xe4>)
 8000fac:	f003 f908 	bl	80041c0 <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fb6:	f000 f90f 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481c      	ldr	r0, [pc, #112]	@ (8001038 <MX_TIM3_Init+0xe4>)
 8000fc8:	f003 fbcc 	bl	8004764 <HAL_TIM_ConfigClockSource>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fd2:	f000 f901 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fd6:	4818      	ldr	r0, [pc, #96]	@ (8001038 <MX_TIM3_Init+0xe4>)
 8000fd8:	f003 f949 	bl	800426e <HAL_TIM_PWM_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fe2:	f000 f8f9 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4810      	ldr	r0, [pc, #64]	@ (8001038 <MX_TIM3_Init+0xe4>)
 8000ff6:	f004 f8bb 	bl	8005170 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001000:	f000 f8ea 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001004:	2360      	movs	r3, #96	@ 0x60
 8001006:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4807      	ldr	r0, [pc, #28]	@ (8001038 <MX_TIM3_Init+0xe4>)
 800101c:	f003 fa8e 	bl	800453c <HAL_TIM_PWM_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001026:	f000 f8d7 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800102a:	4803      	ldr	r0, [pc, #12]	@ (8001038 <MX_TIM3_Init+0xe4>)
 800102c:	f000 f972 	bl	8001314 <HAL_TIM_MspPostInit>

}
 8001030:	bf00      	nop
 8001032:	3738      	adds	r7, #56	@ 0x38
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000014c 	.word	0x2000014c
 800103c:	40000400 	.word	0x40000400

08001040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001046:	4a15      	ldr	r2, [pc, #84]	@ (800109c <MX_USART2_UART_Init+0x5c>)
 8001048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001084:	f004 f8fc 	bl	8005280 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800108e:	f000 f8a3 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000198 	.word	0x20000198
 800109c:	40004400 	.word	0x40004400

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	@ 0x28
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	4b45      	ldr	r3, [pc, #276]	@ (80011cc <MX_GPIO_Init+0x12c>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	4a44      	ldr	r2, [pc, #272]	@ (80011cc <MX_GPIO_Init+0x12c>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c2:	4b42      	ldr	r3, [pc, #264]	@ (80011cc <MX_GPIO_Init+0x12c>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ce:	4b3f      	ldr	r3, [pc, #252]	@ (80011cc <MX_GPIO_Init+0x12c>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	4a3e      	ldr	r2, [pc, #248]	@ (80011cc <MX_GPIO_Init+0x12c>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010da:	4b3c      	ldr	r3, [pc, #240]	@ (80011cc <MX_GPIO_Init+0x12c>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b39      	ldr	r3, [pc, #228]	@ (80011cc <MX_GPIO_Init+0x12c>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	4a38      	ldr	r2, [pc, #224]	@ (80011cc <MX_GPIO_Init+0x12c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f2:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <MX_GPIO_Init+0x12c>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b33      	ldr	r3, [pc, #204]	@ (80011cc <MX_GPIO_Init+0x12c>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a32      	ldr	r2, [pc, #200]	@ (80011cc <MX_GPIO_Init+0x12c>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <MX_GPIO_Init+0x12c>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 800111c:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <MX_GPIO_Init+0x130>)
 800111e:	f000 fdd3 	bl	8001cc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112c:	f000 fdcc 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8001136:	4827      	ldr	r0, [pc, #156]	@ (80011d4 <MX_GPIO_Init+0x134>)
 8001138:	f000 fdc6 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800113c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001142:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	481f      	ldr	r0, [pc, #124]	@ (80011d0 <MX_GPIO_Init+0x130>)
 8001154:	f000 fc0e 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001158:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 800115c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4817      	ldr	r0, [pc, #92]	@ (80011d0 <MX_GPIO_Init+0x130>)
 8001172:	f000 fbff 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001176:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001192:	f000 fbef 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8001196:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4809      	ldr	r0, [pc, #36]	@ (80011d4 <MX_GPIO_Init+0x134>)
 80011b0:	f000 fbe0 	bl	8001974 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2028      	movs	r0, #40	@ 0x28
 80011ba:	f000 fba4 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011be:	2028      	movs	r0, #40	@ 0x28
 80011c0:	f000 fbbd 	bl	800193e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	@ 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000400 	.word	0x48000400

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <Error_Handler+0x8>

080011e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <HAL_MspInit+0x44>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001228 <HAL_MspInit+0x44>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_MspInit+0x44>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_MspInit+0x44>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	4a08      	ldr	r2, [pc, #32]	@ (8001228 <HAL_MspInit+0x44>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120c:	6593      	str	r3, [r2, #88]	@ 0x58
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_MspInit+0x44>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a17      	ldr	r2, [pc, #92]	@ (80012a8 <HAL_SPI_MspInit+0x7c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d128      	bne.n	80012a0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_SPI_MspInit+0x80>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001252:	4a16      	ldr	r2, [pc, #88]	@ (80012ac <HAL_SPI_MspInit+0x80>)
 8001254:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001258:	6613      	str	r3, [r2, #96]	@ 0x60
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_SPI_MspInit+0x80>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_SPI_MspInit+0x80>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <HAL_SPI_MspInit+0x80>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_SPI_MspInit+0x80>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800127e:	23e0      	movs	r3, #224	@ 0xe0
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128e:	2305      	movs	r3, #5
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129c:	f000 fb6a 	bl	8001974 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	@ 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40013000 	.word	0x40013000
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012c0:	d10c      	bne.n	80012dc <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_TIM_Base_MspInit+0x5c>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c6:	4a11      	ldr	r2, [pc, #68]	@ (800130c <HAL_TIM_Base_MspInit+0x5c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_TIM_Base_MspInit+0x5c>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012da:	e010      	b.n	80012fe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <HAL_TIM_Base_MspInit+0x60>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10b      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_TIM_Base_MspInit+0x5c>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ea:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_TIM_Base_MspInit+0x5c>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_TIM_Base_MspInit+0x5c>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	40000400 	.word	0x40000400

08001314 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001334:	d13a      	bne.n	80013ac <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b30      	ldr	r3, [pc, #192]	@ (80013f8 <HAL_TIM_MspPostInit+0xe4>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a2f      	ldr	r2, [pc, #188]	@ (80013f8 <HAL_TIM_MspPostInit+0xe4>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b2d      	ldr	r3, [pc, #180]	@ (80013f8 <HAL_TIM_MspPostInit+0xe4>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	4b2a      	ldr	r3, [pc, #168]	@ (80013f8 <HAL_TIM_MspPostInit+0xe4>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a29      	ldr	r2, [pc, #164]	@ (80013f8 <HAL_TIM_MspPostInit+0xe4>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <HAL_TIM_MspPostInit+0xe4>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001366:	2301      	movs	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001376:	2301      	movs	r3, #1
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001384:	f000 faf6 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001388:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800139a:	2301      	movs	r3, #1
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4815      	ldr	r0, [pc, #84]	@ (80013fc <HAL_TIM_MspPostInit+0xe8>)
 80013a6:	f000 fae5 	bl	8001974 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013aa:	e020      	b.n	80013ee <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a13      	ldr	r2, [pc, #76]	@ (8001400 <HAL_TIM_MspPostInit+0xec>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d11b      	bne.n	80013ee <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <HAL_TIM_MspPostInit+0xe4>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4a0f      	ldr	r2, [pc, #60]	@ (80013f8 <HAL_TIM_MspPostInit+0xe4>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <HAL_TIM_MspPostInit+0xe4>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013ce:	2310      	movs	r3, #16
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013de:	2302      	movs	r3, #2
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4804      	ldr	r0, [pc, #16]	@ (80013fc <HAL_TIM_MspPostInit+0xe8>)
 80013ea:	f000 fac3 	bl	8001974 <HAL_GPIO_Init>
}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	@ 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	48000400 	.word	0x48000400
 8001400:	40000400 	.word	0x40000400

08001404 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0ac      	sub	sp, #176	@ 0xb0
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2288      	movs	r2, #136	@ 0x88
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fcf9 	bl	8005e1c <memset>
  if(huart->Instance==USART2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a21      	ldr	r2, [pc, #132]	@ (80014b4 <HAL_UART_MspInit+0xb0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d13b      	bne.n	80014ac <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001434:	2302      	movs	r3, #2
 8001436:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001438:	2300      	movs	r3, #0
 800143a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4618      	mov	r0, r3
 8001442:	f001 fad5 	bl	80029f0 <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800144c:	f7ff fec4 	bl	80011d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001454:	4a18      	ldr	r2, [pc, #96]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145a:	6593      	str	r3, [r2, #88]	@ 0x58
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146c:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001480:	230c      	movs	r3, #12
 8001482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001498:	2307      	movs	r3, #7
 800149a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a8:	f000 fa64 	bl	8001974 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80014ac:	bf00      	nop
 80014ae:	37b0      	adds	r7, #176	@ 0xb0
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40004400 	.word	0x40004400
 80014b8:	40021000 	.word	0x40021000

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <NMI_Handler+0x4>

080014c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <MemManage_Handler+0x4>

080014d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001512:	f000 f8d9 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}

0800151a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800151e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001522:	f000 fbe9 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f004 fc66 	bl	8005e2c <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	@ (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20018000 	.word	0x20018000
 800158c:	00000400 	.word	0x00000400
 8001590:	20000230 	.word	0x20000230
 8001594:	20000380 	.word	0x20000380

08001598 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c0:	f7ff ffea 	bl	8001598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c4:	480c      	ldr	r0, [pc, #48]	@ (80015f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015c6:	490d      	ldr	r1, [pc, #52]	@ (80015fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001600 <LoopForever+0xe>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001608 <LoopForever+0x16>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ea:	f004 fc25 	bl	8005e38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ee:	f7ff fab7 	bl	8000b60 <main>

080015f2 <LoopForever>:

LoopForever:
    b LoopForever
 80015f2:	e7fe      	b.n	80015f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001600:	080067d8 	.word	0x080067d8
  ldr r2, =_sbss
 8001604:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001608:	20000380 	.word	0x20000380

0800160c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC1_2_IRQHandler>
	...

08001610 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <HAL_Init+0x3c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_Init+0x3c>)
 8001620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001624:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001626:	2003      	movs	r0, #3
 8001628:	f000 f962 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162c:	2000      	movs	r0, #0
 800162e:	f000 f80f 	bl	8001650 <HAL_InitTick>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	71fb      	strb	r3, [r7, #7]
 800163c:	e001      	b.n	8001642 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800163e:	f7ff fdd1 	bl	80011e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001642:	79fb      	ldrb	r3, [r7, #7]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40022000 	.word	0x40022000

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <HAL_InitTick+0x6c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d023      	beq.n	80016ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001664:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <HAL_InitTick+0x70>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <HAL_InitTick+0x6c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f96d 	bl	800195a <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10f      	bne.n	80016a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d809      	bhi.n	80016a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 f937 	bl	8001906 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001698:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <HAL_InitTick+0x74>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e007      	b.n	80016b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e004      	b.n	80016b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	e001      	b.n	80016b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000002c 	.word	0x2000002c
 80016c0:	20000024 	.word	0x20000024
 80016c4:	20000028 	.word	0x20000028

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	2000002c 	.word	0x2000002c
 80016ec:	20000234 	.word	0x20000234

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000234 	.word	0x20000234

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff ffee 	bl	80016f0 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_Delay+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffde 	bl	80016f0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000002c 	.word	0x2000002c

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	@ (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	@ (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	@ (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	@ 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff29 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff3e 	bl	8001798 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff8e 	bl	8001844 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff31 	bl	80017b4 <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa2 	bl	80018ac <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001982:	e17f      	b.n	8001c84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8171 	beq.w	8001c7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d005      	beq.n	80019b4 <HAL_GPIO_Init+0x40>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d130      	bne.n	8001a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ea:	2201      	movs	r2, #1
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	091b      	lsrs	r3, r3, #4
 8001a00:	f003 0201 	and.w	r2, r3, #1
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d118      	bne.n	8001a54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	f003 0201 	and.w	r2, r3, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d017      	beq.n	8001a90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d123      	bne.n	8001ae4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3208      	adds	r2, #8
 8001aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	08da      	lsrs	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3208      	adds	r2, #8
 8001ade:	6939      	ldr	r1, [r7, #16]
 8001ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0203 	and.w	r2, r3, #3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80ac 	beq.w	8001c7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca4 <HAL_GPIO_Init+0x330>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ca4 <HAL_GPIO_Init+0x330>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b32:	4b5c      	ldr	r3, [pc, #368]	@ (8001ca4 <HAL_GPIO_Init+0x330>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b3e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca8 <HAL_GPIO_Init+0x334>)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x242>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001cac <HAL_GPIO_Init+0x338>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x23e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4e      	ldr	r2, [pc, #312]	@ (8001cb0 <HAL_GPIO_Init+0x33c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x23a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001cb4 <HAL_GPIO_Init+0x340>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x236>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4c      	ldr	r2, [pc, #304]	@ (8001cb8 <HAL_GPIO_Init+0x344>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x232>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001cbc <HAL_GPIO_Init+0x348>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x22e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4a      	ldr	r2, [pc, #296]	@ (8001cc0 <HAL_GPIO_Init+0x34c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x22a>
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	e00c      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	e00a      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bc8:	4937      	ldr	r1, [pc, #220]	@ (8001ca8 <HAL_GPIO_Init+0x334>)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc4 <HAL_GPIO_Init+0x350>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bfa:	4a32      	ldr	r2, [pc, #200]	@ (8001cc4 <HAL_GPIO_Init+0x350>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c00:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c24:	4a27      	ldr	r2, [pc, #156]	@ (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c2a:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c78:	4a12      	ldr	r2, [pc, #72]	@ (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f47f ae78 	bne.w	8001984 <HAL_GPIO_Init+0x10>
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	48000400 	.word	0x48000400
 8001cb0:	48000800 	.word	0x48000800
 8001cb4:	48000c00 	.word	0x48000c00
 8001cb8:	48001000 	.word	0x48001000
 8001cbc:	48001400 	.word	0x48001400
 8001cc0:	48001800 	.word	0x48001800
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d0e:	4a05      	ldr	r2, [pc, #20]	@ (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ff00 	bl	8000b1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40007000 	.word	0x40007000

08001d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d52:	d130      	bne.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d54:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d60:	d038      	beq.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d62:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2232      	movs	r2, #50	@ 0x32
 8001d78:	fb02 f303 	mul.w	r3, r2, r3
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9b      	lsrs	r3, r3, #18
 8001d84:	3301      	adds	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d88:	e002      	b.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d9c:	d102      	bne.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f2      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da4:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001db0:	d110      	bne.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e00f      	b.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001db6:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dc2:	d007      	beq.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc4:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dcc:	4a05      	ldr	r2, [pc, #20]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40007000 	.word	0x40007000
 8001de8:	20000024 	.word	0x20000024
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e3ca      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e02:	4b97      	ldr	r3, [pc, #604]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e0c:	4b94      	ldr	r3, [pc, #592]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80e4 	beq.w	8001fec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_RCC_OscConfig+0x4a>
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	f040 808b 	bne.w	8001f48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	f040 8087 	bne.w	8001f48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e3a:	4b89      	ldr	r3, [pc, #548]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x62>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e3a2      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1a      	ldr	r2, [r3, #32]
 8001e56:	4b82      	ldr	r3, [pc, #520]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_RCC_OscConfig+0x7c>
 8001e62:	4b7f      	ldr	r3, [pc, #508]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e6a:	e005      	b.n	8001e78 <HAL_RCC_OscConfig+0x88>
 8001e6c:	4b7c      	ldr	r3, [pc, #496]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d223      	bcs.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fd55 	bl	8002930 <RCC_SetFlashLatencyFromMSIRange>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e383      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e90:	4b73      	ldr	r3, [pc, #460]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a72      	ldr	r2, [pc, #456]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e96:	f043 0308 	orr.w	r3, r3, #8
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b70      	ldr	r3, [pc, #448]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	496d      	ldr	r1, [pc, #436]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eae:	4b6c      	ldr	r3, [pc, #432]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	4968      	ldr	r1, [pc, #416]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
 8001ec2:	e025      	b.n	8001f10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec4:	4b66      	ldr	r3, [pc, #408]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a65      	ldr	r2, [pc, #404]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b63      	ldr	r3, [pc, #396]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4960      	ldr	r1, [pc, #384]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee2:	4b5f      	ldr	r3, [pc, #380]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	495b      	ldr	r1, [pc, #364]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fd15 	bl	8002930 <RCC_SetFlashLatencyFromMSIRange>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e343      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f10:	f000 fc4a 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b52      	ldr	r3, [pc, #328]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	4950      	ldr	r1, [pc, #320]	@ (8002064 <HAL_RCC_OscConfig+0x274>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	4a4e      	ldr	r2, [pc, #312]	@ (8002068 <HAL_RCC_OscConfig+0x278>)
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f30:	4b4e      	ldr	r3, [pc, #312]	@ (800206c <HAL_RCC_OscConfig+0x27c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fb8b 	bl	8001650 <HAL_InitTick>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d052      	beq.n	8001fea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	e327      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d032      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f50:	4b43      	ldr	r3, [pc, #268]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a42      	ldr	r2, [pc, #264]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fbc8 	bl	80016f0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f64:	f7ff fbc4 	bl	80016f0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e310      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f76:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f82:	4b37      	ldr	r3, [pc, #220]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a36      	ldr	r2, [pc, #216]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b34      	ldr	r3, [pc, #208]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4931      	ldr	r1, [pc, #196]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	492c      	ldr	r1, [pc, #176]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	e01a      	b.n	8001fec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a29      	ldr	r2, [pc, #164]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fb95 	bl	80016f0 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fca:	f7ff fb91 	bl	80016f0 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e2dd      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fdc:	4b20      	ldr	r3, [pc, #128]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x1da>
 8001fe8:	e000      	b.n	8001fec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d074      	beq.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x21a>
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b0c      	cmp	r3, #12
 8002002:	d10e      	bne.n	8002022 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d10b      	bne.n	8002022 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d064      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d160      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e2ba      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x24a>
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0b      	ldr	r2, [pc, #44]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e026      	b.n	8002088 <HAL_RCC_OscConfig+0x298>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002042:	d115      	bne.n	8002070 <HAL_RCC_OscConfig+0x280>
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a05      	ldr	r2, [pc, #20]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 800204a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a02      	ldr	r2, [pc, #8]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	e014      	b.n	8002088 <HAL_RCC_OscConfig+0x298>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	0800674c 	.word	0x0800674c
 8002068:	20000024 	.word	0x20000024
 800206c:	20000028 	.word	0x20000028
 8002070:	4ba0      	ldr	r3, [pc, #640]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a9f      	ldr	r2, [pc, #636]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b9d      	ldr	r3, [pc, #628]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a9c      	ldr	r2, [pc, #624]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff fb2e 	bl	80016f0 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7ff fb2a 	bl	80016f0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	@ 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e276      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020aa:	4b92      	ldr	r3, [pc, #584]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x2a8>
 80020b6:	e014      	b.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fb1a 	bl	80016f0 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff fb16 	bl	80016f0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	@ 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e262      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d2:	4b88      	ldr	r3, [pc, #544]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x2d0>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d060      	beq.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_OscConfig+0x310>
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d119      	bne.n	800212e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d116      	bne.n	800212e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002100:	4b7c      	ldr	r3, [pc, #496]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_OscConfig+0x328>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e23f      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b76      	ldr	r3, [pc, #472]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	4973      	ldr	r1, [pc, #460]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800212c:	e040      	b.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d023      	beq.n	800217e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002136:	4b6f      	ldr	r3, [pc, #444]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6e      	ldr	r2, [pc, #440]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7ff fad5 	bl	80016f0 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7ff fad1 	bl	80016f0 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e21d      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800215c:	4b65      	ldr	r3, [pc, #404]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b62      	ldr	r3, [pc, #392]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	495f      	ldr	r1, [pc, #380]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	e018      	b.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217e:	4b5d      	ldr	r3, [pc, #372]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a5c      	ldr	r2, [pc, #368]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7ff fab1 	bl	80016f0 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff faad 	bl	80016f0 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1f9      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a4:	4b53      	ldr	r3, [pc, #332]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d03c      	beq.n	8002236 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01c      	beq.n	80021fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c4:	4b4b      	ldr	r3, [pc, #300]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80021c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ca:	4a4a      	ldr	r2, [pc, #296]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff fa8c 	bl	80016f0 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff fa88 	bl	80016f0 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1d4      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ee:	4b41      	ldr	r3, [pc, #260]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80021f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ef      	beq.n	80021dc <HAL_RCC_OscConfig+0x3ec>
 80021fc:	e01b      	b.n	8002236 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fe:	4b3d      	ldr	r3, [pc, #244]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002204:	4a3b      	ldr	r2, [pc, #236]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7ff fa6f 	bl	80016f0 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002216:	f7ff fa6b 	bl	80016f0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e1b7      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002228:	4b32      	ldr	r3, [pc, #200]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1ef      	bne.n	8002216 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80a6 	beq.w	8002390 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002244:	2300      	movs	r3, #0
 8002246:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002248:	4b2a      	ldr	r3, [pc, #168]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002254:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002258:	4a26      	ldr	r2, [pc, #152]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 800225a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800225e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002260:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226c:	2301      	movs	r3, #1
 800226e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002270:	4b21      	ldr	r3, [pc, #132]	@ (80022f8 <HAL_RCC_OscConfig+0x508>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d118      	bne.n	80022ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227c:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <HAL_RCC_OscConfig+0x508>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1d      	ldr	r2, [pc, #116]	@ (80022f8 <HAL_RCC_OscConfig+0x508>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002286:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002288:	f7ff fa32 	bl	80016f0 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002290:	f7ff fa2e 	bl	80016f0 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e17a      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <HAL_RCC_OscConfig+0x508>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d108      	bne.n	80022c8 <HAL_RCC_OscConfig+0x4d8>
 80022b6:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022bc:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022c6:	e029      	b.n	800231c <HAL_RCC_OscConfig+0x52c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d115      	bne.n	80022fc <HAL_RCC_OscConfig+0x50c>
 80022d0:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d6:	4a07      	ldr	r2, [pc, #28]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022e0:	4b04      	ldr	r3, [pc, #16]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e6:	4a03      	ldr	r2, [pc, #12]	@ (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x52c>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40007000 	.word	0x40007000
 80022fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002302:	4a9b      	ldr	r2, [pc, #620]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800230c:	4b98      	ldr	r3, [pc, #608]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002312:	4a97      	ldr	r2, [pc, #604]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d016      	beq.n	8002352 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7ff f9e4 	bl	80016f0 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7ff f9e0 	bl	80016f0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e12a      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002342:	4b8b      	ldr	r3, [pc, #556]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ed      	beq.n	800232c <HAL_RCC_OscConfig+0x53c>
 8002350:	e015      	b.n	800237e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7ff f9cd 	bl	80016f0 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7ff f9c9 	bl	80016f0 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e113      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002370:	4b7f      	ldr	r3, [pc, #508]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ed      	bne.n	800235a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800237e:	7ffb      	ldrb	r3, [r7, #31]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b7a      	ldr	r3, [pc, #488]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002388:	4a79      	ldr	r2, [pc, #484]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800238e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80fe 	beq.w	8002596 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	2b02      	cmp	r3, #2
 80023a0:	f040 80d0 	bne.w	8002544 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023a4:	4b72      	ldr	r3, [pc, #456]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0203 	and.w	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d130      	bne.n	800241a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	3b01      	subs	r3, #1
 80023c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d127      	bne.n	800241a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d11f      	bne.n	800241a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023e4:	2a07      	cmp	r2, #7
 80023e6:	bf14      	ite	ne
 80023e8:	2201      	movne	r2, #1
 80023ea:	2200      	moveq	r2, #0
 80023ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d113      	bne.n	800241a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	3b01      	subs	r3, #1
 8002400:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d109      	bne.n	800241a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	085b      	lsrs	r3, r3, #1
 8002412:	3b01      	subs	r3, #1
 8002414:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d06e      	beq.n	80024f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d069      	beq.n	80024f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002420:	4b53      	ldr	r3, [pc, #332]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d105      	bne.n	8002438 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800242c:	4b50      	ldr	r3, [pc, #320]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0ad      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800243c:	4b4c      	ldr	r3, [pc, #304]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a4b      	ldr	r2, [pc, #300]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002446:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002448:	f7ff f952 	bl	80016f0 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7ff f94e 	bl	80016f0 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e09a      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002462:	4b43      	ldr	r3, [pc, #268]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246e:	4b40      	ldr	r3, [pc, #256]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	4b40      	ldr	r3, [pc, #256]	@ (8002574 <HAL_RCC_OscConfig+0x784>)
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800247e:	3a01      	subs	r2, #1
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002488:	0212      	lsls	r2, r2, #8
 800248a:	4311      	orrs	r1, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002490:	0852      	lsrs	r2, r2, #1
 8002492:	3a01      	subs	r2, #1
 8002494:	0552      	lsls	r2, r2, #21
 8002496:	4311      	orrs	r1, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800249c:	0852      	lsrs	r2, r2, #1
 800249e:	3a01      	subs	r2, #1
 80024a0:	0652      	lsls	r2, r2, #25
 80024a2:	4311      	orrs	r1, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024a8:	0912      	lsrs	r2, r2, #4
 80024aa:	0452      	lsls	r2, r2, #17
 80024ac:	430a      	orrs	r2, r1
 80024ae:	4930      	ldr	r1, [pc, #192]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 80024ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 80024c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024cc:	f7ff f910 	bl	80016f0 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7ff f90c 	bl	80016f0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e058      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e6:	4b22      	ldr	r3, [pc, #136]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f2:	e050      	b.n	8002596 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e04f      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d148      	bne.n	8002596 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a19      	ldr	r2, [pc, #100]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 800250a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800250e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002510:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a16      	ldr	r2, [pc, #88]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800251a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800251c:	f7ff f8e8 	bl	80016f0 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002524:	f7ff f8e4 	bl	80016f0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e030      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002536:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x734>
 8002542:	e028      	b.n	8002596 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d023      	beq.n	8002592 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a08      	ldr	r2, [pc, #32]	@ (8002570 <HAL_RCC_OscConfig+0x780>)
 8002550:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7ff f8cb 	bl	80016f0 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255c:	e00c      	b.n	8002578 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7ff f8c7 	bl	80016f0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d905      	bls.n	8002578 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e013      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
 8002570:	40021000 	.word	0x40021000
 8002574:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <HAL_RCC_OscConfig+0x7b0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ec      	bne.n	800255e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_RCC_OscConfig+0x7b0>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	4905      	ldr	r1, [pc, #20]	@ (80025a0 <HAL_RCC_OscConfig+0x7b0>)
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_RCC_OscConfig+0x7b4>)
 800258c:	4013      	ands	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
 8002590:	e001      	b.n	8002596 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	feeefffc 	.word	0xfeeefffc

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0e7      	b.n	800278c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b75      	ldr	r3, [pc, #468]	@ (8002794 <HAL_RCC_ClockConfig+0x1ec>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d910      	bls.n	80025ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b72      	ldr	r3, [pc, #456]	@ (8002794 <HAL_RCC_ClockConfig+0x1ec>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 0207 	bic.w	r2, r3, #7
 80025d2:	4970      	ldr	r1, [pc, #448]	@ (8002794 <HAL_RCC_ClockConfig+0x1ec>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b6e      	ldr	r3, [pc, #440]	@ (8002794 <HAL_RCC_ClockConfig+0x1ec>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0cf      	b.n	800278c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d010      	beq.n	800261a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	4b66      	ldr	r3, [pc, #408]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002604:	429a      	cmp	r2, r3
 8002606:	d908      	bls.n	800261a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002608:	4b63      	ldr	r3, [pc, #396]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4960      	ldr	r1, [pc, #384]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d04c      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	4b5a      	ldr	r3, [pc, #360]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d121      	bne.n	800267e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0a6      	b.n	800278c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002646:	4b54      	ldr	r3, [pc, #336]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d115      	bne.n	800267e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e09a      	b.n	800278c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265e:	4b4e      	ldr	r3, [pc, #312]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e08e      	b.n	800278c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266e:	4b4a      	ldr	r3, [pc, #296]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e086      	b.n	800278c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800267e:	4b46      	ldr	r3, [pc, #280]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f023 0203 	bic.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4943      	ldr	r1, [pc, #268]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002690:	f7ff f82e 	bl	80016f0 <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	e00a      	b.n	80026ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002698:	f7ff f82a 	bl	80016f0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e06e      	b.n	800278c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 020c 	and.w	r2, r3, #12
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	429a      	cmp	r2, r3
 80026be:	d1eb      	bne.n	8002698 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d010      	beq.n	80026ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	4b31      	ldr	r3, [pc, #196]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026d8:	429a      	cmp	r2, r3
 80026da:	d208      	bcs.n	80026ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	492b      	ldr	r1, [pc, #172]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ee:	4b29      	ldr	r3, [pc, #164]	@ (8002794 <HAL_RCC_ClockConfig+0x1ec>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d210      	bcs.n	800271e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fc:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <HAL_RCC_ClockConfig+0x1ec>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 0207 	bic.w	r2, r3, #7
 8002704:	4923      	ldr	r1, [pc, #140]	@ (8002794 <HAL_RCC_ClockConfig+0x1ec>)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270c:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <HAL_RCC_ClockConfig+0x1ec>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d001      	beq.n	800271e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e036      	b.n	800278c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272a:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	4918      	ldr	r1, [pc, #96]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 8002738:	4313      	orrs	r3, r2
 800273a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d009      	beq.n	800275c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002748:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4910      	ldr	r1, [pc, #64]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	4313      	orrs	r3, r2
 800275a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800275c:	f000 f824 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <HAL_RCC_ClockConfig+0x1f0>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	490b      	ldr	r1, [pc, #44]	@ (800279c <HAL_RCC_ClockConfig+0x1f4>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f8>)
 800277a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_ClockConfig+0x1fc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe ff65 	bl	8001650 <HAL_InitTick>
 8002786:	4603      	mov	r3, r0
 8002788:	72fb      	strb	r3, [r7, #11]

  return status;
 800278a:	7afb      	ldrb	r3, [r7, #11]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40022000 	.word	0x40022000
 8002798:	40021000 	.word	0x40021000
 800279c:	0800674c 	.word	0x0800674c
 80027a0:	20000024 	.word	0x20000024
 80027a4:	20000028 	.word	0x20000028

080027a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	@ 0x24
 80027ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b6:	4b3e      	ldr	r3, [pc, #248]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c0:	4b3b      	ldr	r3, [pc, #236]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x34>
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d121      	bne.n	800281a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d11e      	bne.n	800281a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027dc:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d107      	bne.n	80027f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027e8:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	e005      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027f8:	4b2d      	ldr	r3, [pc, #180]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002804:	4a2b      	ldr	r2, [pc, #172]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10d      	bne.n	8002830 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d102      	bne.n	8002826 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002820:	4b25      	ldr	r3, [pc, #148]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	e004      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d101      	bne.n	8002830 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800282c:	4b23      	ldr	r3, [pc, #140]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x114>)
 800282e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b0c      	cmp	r3, #12
 8002834:	d134      	bne.n	80028a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002836:	4b1e      	ldr	r3, [pc, #120]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d003      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0xa6>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d003      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0xac>
 800284c:	e005      	b.n	800285a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800284e:	4b1a      	ldr	r3, [pc, #104]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002850:	617b      	str	r3, [r7, #20]
      break;
 8002852:	e005      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002854:	4b19      	ldr	r3, [pc, #100]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x114>)
 8002856:	617b      	str	r3, [r7, #20]
      break;
 8002858:	e002      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	617b      	str	r3, [r7, #20]
      break;
 800285e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002860:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	3301      	adds	r3, #1
 800286c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	fb03 f202 	mul.w	r2, r3, r2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002886:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	0e5b      	lsrs	r3, r3, #25
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	3301      	adds	r3, #1
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028a0:	69bb      	ldr	r3, [r7, #24]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3724      	adds	r7, #36	@ 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08006764 	.word	0x08006764
 80028b8:	00f42400 	.word	0x00f42400
 80028bc:	007a1200 	.word	0x007a1200

080028c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b03      	ldr	r3, [pc, #12]	@ (80028d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000024 	.word	0x20000024

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028dc:	f7ff fff0 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4904      	ldr	r1, [pc, #16]	@ (8002900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000
 8002900:	0800675c 	.word	0x0800675c

08002904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002908:	f7ff ffda 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	0adb      	lsrs	r3, r3, #11
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4904      	ldr	r1, [pc, #16]	@ (800292c <HAL_RCC_GetPCLK2Freq+0x28>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000
 800292c:	0800675c 	.word	0x0800675c

08002930 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800293c:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002948:	f7ff f9ee 	bl	8001d28 <HAL_PWREx_GetVoltageRange>
 800294c:	6178      	str	r0, [r7, #20]
 800294e:	e014      	b.n	800297a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002954:	4a24      	ldr	r2, [pc, #144]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800295a:	6593      	str	r3, [r2, #88]	@ 0x58
 800295c:	4b22      	ldr	r3, [pc, #136]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002968:	f7ff f9de 	bl	8001d28 <HAL_PWREx_GetVoltageRange>
 800296c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800296e:	4b1e      	ldr	r3, [pc, #120]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002972:	4a1d      	ldr	r2, [pc, #116]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002978:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002980:	d10b      	bne.n	800299a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b80      	cmp	r3, #128	@ 0x80
 8002986:	d919      	bls.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2ba0      	cmp	r3, #160	@ 0xa0
 800298c:	d902      	bls.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800298e:	2302      	movs	r3, #2
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	e013      	b.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002994:	2301      	movs	r3, #1
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	e010      	b.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b80      	cmp	r3, #128	@ 0x80
 800299e:	d902      	bls.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029a0:	2303      	movs	r3, #3
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	e00a      	b.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b80      	cmp	r3, #128	@ 0x80
 80029aa:	d102      	bne.n	80029b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029ac:	2302      	movs	r3, #2
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	e004      	b.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b70      	cmp	r3, #112	@ 0x70
 80029b6:	d101      	bne.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029b8:	2301      	movs	r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 0207 	bic.w	r2, r3, #7
 80029c4:	4909      	ldr	r1, [pc, #36]	@ (80029ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029cc:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40022000 	.word	0x40022000

080029f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029f8:	2300      	movs	r3, #0
 80029fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029fc:	2300      	movs	r3, #0
 80029fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d041      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a14:	d02a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a1a:	d824      	bhi.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a20:	d008      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a26:	d81e      	bhi.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a30:	d010      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a32:	e018      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a34:	4b86      	ldr	r3, [pc, #536]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a85      	ldr	r2, [pc, #532]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a40:	e015      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fabb 	bl	8002fc4 <RCCEx_PLLSAI1_Config>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a52:	e00c      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3320      	adds	r3, #32
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fba6 	bl	80031ac <RCCEx_PLLSAI2_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a64:	e003      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	74fb      	strb	r3, [r7, #19]
      break;
 8002a6a:	e000      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a6e:	7cfb      	ldrb	r3, [r7, #19]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a74:	4b76      	ldr	r3, [pc, #472]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a82:	4973      	ldr	r1, [pc, #460]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a8a:	e001      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d041      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aa0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002aa4:	d02a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002aa6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002aaa:	d824      	bhi.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002aac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ab0:	d008      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ab2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ab6:	d81e      	bhi.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ac0:	d010      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ac2:	e018      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ac4:	4b62      	ldr	r3, [pc, #392]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a61      	ldr	r2, [pc, #388]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ace:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ad0:	e015      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fa73 	bl	8002fc4 <RCCEx_PLLSAI1_Config>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ae2:	e00c      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3320      	adds	r3, #32
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fb5e 	bl	80031ac <RCCEx_PLLSAI2_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002af4:	e003      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	74fb      	strb	r3, [r7, #19]
      break;
 8002afa:	e000      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002afe:	7cfb      	ldrb	r3, [r7, #19]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b04:	4b52      	ldr	r3, [pc, #328]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b12:	494f      	ldr	r1, [pc, #316]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b1a:	e001      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80a0 	beq.w	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b32:	4b47      	ldr	r3, [pc, #284]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b42:	2300      	movs	r3, #0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00d      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	4b41      	ldr	r3, [pc, #260]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4c:	4a40      	ldr	r2, [pc, #256]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b54:	4b3e      	ldr	r3, [pc, #248]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b64:	4b3b      	ldr	r3, [pc, #236]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a3a      	ldr	r2, [pc, #232]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b70:	f7fe fdbe 	bl	80016f0 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b76:	e009      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b78:	f7fe fdba 	bl	80016f0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d902      	bls.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	74fb      	strb	r3, [r7, #19]
        break;
 8002b8a:	e005      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b8c:	4b31      	ldr	r3, [pc, #196]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ef      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d15c      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01f      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d019      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bbc:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bc8:	4b21      	ldr	r3, [pc, #132]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bce:	4a20      	ldr	r2, [pc, #128]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bde:	4a1c      	ldr	r2, [pc, #112]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002be8:	4a19      	ldr	r2, [pc, #100]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fd79 	bl	80016f0 <HAL_GetTick>
 8002bfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c00:	e00b      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe fd75 	bl	80016f0 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d902      	bls.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	74fb      	strb	r3, [r7, #19]
            break;
 8002c18:	e006      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ec      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c2e:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c3e:	4904      	ldr	r1, [pc, #16]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c46:	e009      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	74bb      	strb	r3, [r7, #18]
 8002c4c:	e006      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5c:	7c7b      	ldrb	r3, [r7, #17]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d105      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c62:	4b9e      	ldr	r3, [pc, #632]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c66:	4a9d      	ldr	r2, [pc, #628]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c7a:	4b98      	ldr	r3, [pc, #608]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c80:	f023 0203 	bic.w	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c88:	4994      	ldr	r1, [pc, #592]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca2:	f023 020c 	bic.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002caa:	498c      	ldr	r1, [pc, #560]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cbe:	4b87      	ldr	r3, [pc, #540]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	4983      	ldr	r1, [pc, #524]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	497b      	ldr	r1, [pc, #492]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d02:	4b76      	ldr	r3, [pc, #472]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d10:	4972      	ldr	r1, [pc, #456]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d24:	4b6d      	ldr	r3, [pc, #436]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d32:	496a      	ldr	r1, [pc, #424]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d46:	4b65      	ldr	r3, [pc, #404]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d54:	4961      	ldr	r1, [pc, #388]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d68:	4b5c      	ldr	r3, [pc, #368]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d76:	4959      	ldr	r1, [pc, #356]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d8a:	4b54      	ldr	r3, [pc, #336]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d98:	4950      	ldr	r1, [pc, #320]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dac:	4b4b      	ldr	r3, [pc, #300]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dba:	4948      	ldr	r1, [pc, #288]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dce:	4b43      	ldr	r3, [pc, #268]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	493f      	ldr	r1, [pc, #252]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d028      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002df0:	4b3a      	ldr	r3, [pc, #232]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dfe:	4937      	ldr	r1, [pc, #220]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e10:	4b32      	ldr	r3, [pc, #200]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a31      	ldr	r2, [pc, #196]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e1a:	60d3      	str	r3, [r2, #12]
 8002e1c:	e011      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f8c8 	bl	8002fc4 <RCCEx_PLLSAI1_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d028      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e4e:	4b23      	ldr	r3, [pc, #140]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e54:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5c:	491f      	ldr	r1, [pc, #124]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4a1a      	ldr	r2, [pc, #104]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e78:	60d3      	str	r3, [r2, #12]
 8002e7a:	e011      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f899 	bl	8002fc4 <RCCEx_PLLSAI1_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02b      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eba:	4908      	ldr	r1, [pc, #32]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a02      	ldr	r2, [pc, #8]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ed6:	60d3      	str	r3, [r2, #12]
 8002ed8:	e014      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f867 	bl	8002fc4 <RCCEx_PLLSAI1_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d02f      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f10:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f1e:	4928      	ldr	r1, [pc, #160]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f2e:	d10d      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	2102      	movs	r1, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f844 	bl	8002fc4 <RCCEx_PLLSAI1_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d014      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	74bb      	strb	r3, [r7, #18]
 8002f4a:	e011      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3320      	adds	r3, #32
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 f925 	bl	80031ac <RCCEx_PLLSAI2_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f66:	7cfb      	ldrb	r3, [r7, #19]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f7c:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f8a:	490d      	ldr	r1, [pc, #52]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f9e:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fae:	4904      	ldr	r1, [pc, #16]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fd2:	4b75      	ldr	r3, [pc, #468]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d018      	beq.n	8003010 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fde:	4b72      	ldr	r3, [pc, #456]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0203 	and.w	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d10d      	bne.n	800300a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ff6:	4b6c      	ldr	r3, [pc, #432]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
       ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d047      	beq.n	800309a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	e044      	b.n	800309a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d018      	beq.n	800304a <RCCEx_PLLSAI1_Config+0x86>
 8003018:	2b03      	cmp	r3, #3
 800301a:	d825      	bhi.n	8003068 <RCCEx_PLLSAI1_Config+0xa4>
 800301c:	2b01      	cmp	r3, #1
 800301e:	d002      	beq.n	8003026 <RCCEx_PLLSAI1_Config+0x62>
 8003020:	2b02      	cmp	r3, #2
 8003022:	d009      	beq.n	8003038 <RCCEx_PLLSAI1_Config+0x74>
 8003024:	e020      	b.n	8003068 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003026:	4b60      	ldr	r3, [pc, #384]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11d      	bne.n	800306e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003036:	e01a      	b.n	800306e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003038:	4b5b      	ldr	r3, [pc, #364]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d116      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003048:	e013      	b.n	8003072 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800304a:	4b57      	ldr	r3, [pc, #348]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003056:	4b54      	ldr	r3, [pc, #336]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003066:	e006      	b.n	8003076 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      break;
 800306c:	e004      	b.n	8003078 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800306e:	bf00      	nop
 8003070:	e002      	b.n	8003078 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003072:	bf00      	nop
 8003074:	e000      	b.n	8003078 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003076:	bf00      	nop
    }

    if(status == HAL_OK)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10d      	bne.n	800309a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800307e:	4b4a      	ldr	r3, [pc, #296]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	430b      	orrs	r3, r1
 8003094:	4944      	ldr	r1, [pc, #272]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d17d      	bne.n	800319c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030a0:	4b41      	ldr	r3, [pc, #260]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a40      	ldr	r2, [pc, #256]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fe fb20 	bl	80016f0 <HAL_GetTick>
 80030b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030b2:	e009      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030b4:	f7fe fb1c 	bl	80016f0 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d902      	bls.n	80030c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	73fb      	strb	r3, [r7, #15]
        break;
 80030c6:	e005      	b.n	80030d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030c8:	4b37      	ldr	r3, [pc, #220]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ef      	bne.n	80030b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d160      	bne.n	800319c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d111      	bne.n	8003104 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e0:	4b31      	ldr	r3, [pc, #196]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80030e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6892      	ldr	r2, [r2, #8]
 80030f0:	0211      	lsls	r1, r2, #8
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68d2      	ldr	r2, [r2, #12]
 80030f6:	0912      	lsrs	r2, r2, #4
 80030f8:	0452      	lsls	r2, r2, #17
 80030fa:	430a      	orrs	r2, r1
 80030fc:	492a      	ldr	r1, [pc, #168]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	610b      	str	r3, [r1, #16]
 8003102:	e027      	b.n	8003154 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d112      	bne.n	8003130 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800310a:	4b27      	ldr	r3, [pc, #156]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003112:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6892      	ldr	r2, [r2, #8]
 800311a:	0211      	lsls	r1, r2, #8
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6912      	ldr	r2, [r2, #16]
 8003120:	0852      	lsrs	r2, r2, #1
 8003122:	3a01      	subs	r2, #1
 8003124:	0552      	lsls	r2, r2, #21
 8003126:	430a      	orrs	r2, r1
 8003128:	491f      	ldr	r1, [pc, #124]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	610b      	str	r3, [r1, #16]
 800312e:	e011      	b.n	8003154 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003130:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003138:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6892      	ldr	r2, [r2, #8]
 8003140:	0211      	lsls	r1, r2, #8
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6952      	ldr	r2, [r2, #20]
 8003146:	0852      	lsrs	r2, r2, #1
 8003148:	3a01      	subs	r2, #1
 800314a:	0652      	lsls	r2, r2, #25
 800314c:	430a      	orrs	r2, r1
 800314e:	4916      	ldr	r1, [pc, #88]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003150:	4313      	orrs	r3, r2
 8003152:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003154:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a13      	ldr	r2, [pc, #76]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800315e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fe fac6 	bl	80016f0 <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003166:	e009      	b.n	800317c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003168:	f7fe fac2 	bl	80016f0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d902      	bls.n	800317c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	73fb      	strb	r3, [r7, #15]
          break;
 800317a:	e005      	b.n	8003188 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800317c:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ef      	beq.n	8003168 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800318e:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	4904      	ldr	r1, [pc, #16]	@ (80031a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000

080031ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d018      	beq.n	80031f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031c6:	4b67      	ldr	r3, [pc, #412]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0203 	and.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d10d      	bne.n	80031f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
       ||
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031de:	4b61      	ldr	r3, [pc, #388]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
       ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d047      	beq.n	8003282 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
 80031f6:	e044      	b.n	8003282 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d018      	beq.n	8003232 <RCCEx_PLLSAI2_Config+0x86>
 8003200:	2b03      	cmp	r3, #3
 8003202:	d825      	bhi.n	8003250 <RCCEx_PLLSAI2_Config+0xa4>
 8003204:	2b01      	cmp	r3, #1
 8003206:	d002      	beq.n	800320e <RCCEx_PLLSAI2_Config+0x62>
 8003208:	2b02      	cmp	r3, #2
 800320a:	d009      	beq.n	8003220 <RCCEx_PLLSAI2_Config+0x74>
 800320c:	e020      	b.n	8003250 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800320e:	4b55      	ldr	r3, [pc, #340]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11d      	bne.n	8003256 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800321e:	e01a      	b.n	8003256 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003220:	4b50      	ldr	r3, [pc, #320]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003228:	2b00      	cmp	r3, #0
 800322a:	d116      	bne.n	800325a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003230:	e013      	b.n	800325a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003232:	4b4c      	ldr	r3, [pc, #304]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800323e:	4b49      	ldr	r3, [pc, #292]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800324e:	e006      	b.n	800325e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      break;
 8003254:	e004      	b.n	8003260 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003256:	bf00      	nop
 8003258:	e002      	b.n	8003260 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800325a:	bf00      	nop
 800325c:	e000      	b.n	8003260 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800325e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003266:	4b3f      	ldr	r3, [pc, #252]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	430b      	orrs	r3, r1
 800327c:	4939      	ldr	r1, [pc, #228]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327e:	4313      	orrs	r3, r2
 8003280:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d167      	bne.n	8003358 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003288:	4b36      	ldr	r3, [pc, #216]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a35      	ldr	r2, [pc, #212]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003294:	f7fe fa2c 	bl	80016f0 <HAL_GetTick>
 8003298:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800329a:	e009      	b.n	80032b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800329c:	f7fe fa28 	bl	80016f0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d902      	bls.n	80032b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	73fb      	strb	r3, [r7, #15]
        break;
 80032ae:	e005      	b.n	80032bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ef      	bne.n	800329c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d14a      	bne.n	8003358 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d111      	bne.n	80032ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032c8:	4b26      	ldr	r3, [pc, #152]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80032d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6892      	ldr	r2, [r2, #8]
 80032d8:	0211      	lsls	r1, r2, #8
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68d2      	ldr	r2, [r2, #12]
 80032de:	0912      	lsrs	r2, r2, #4
 80032e0:	0452      	lsls	r2, r2, #17
 80032e2:	430a      	orrs	r2, r1
 80032e4:	491f      	ldr	r1, [pc, #124]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	614b      	str	r3, [r1, #20]
 80032ea:	e011      	b.n	8003310 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80032f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6892      	ldr	r2, [r2, #8]
 80032fc:	0211      	lsls	r1, r2, #8
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6912      	ldr	r2, [r2, #16]
 8003302:	0852      	lsrs	r2, r2, #1
 8003304:	3a01      	subs	r2, #1
 8003306:	0652      	lsls	r2, r2, #25
 8003308:	430a      	orrs	r2, r1
 800330a:	4916      	ldr	r1, [pc, #88]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800330c:	4313      	orrs	r3, r2
 800330e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003310:	4b14      	ldr	r3, [pc, #80]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a13      	ldr	r2, [pc, #76]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800331a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331c:	f7fe f9e8 	bl	80016f0 <HAL_GetTick>
 8003320:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003322:	e009      	b.n	8003338 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003324:	f7fe f9e4 	bl	80016f0 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d902      	bls.n	8003338 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	73fb      	strb	r3, [r7, #15]
          break;
 8003336:	e005      	b.n	8003344 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003338:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0ef      	beq.n	8003324 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4904      	ldr	r1, [pc, #16]	@ (8003364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003354:	4313      	orrs	r3, r2
 8003356:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000

08003368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e095      	b.n	80034a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	2b00      	cmp	r3, #0
 8003380:	d108      	bne.n	8003394 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800338a:	d009      	beq.n	80033a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	61da      	str	r2, [r3, #28]
 8003392:	e005      	b.n	80033a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd ff36 	bl	800122c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033e0:	d902      	bls.n	80033e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e002      	b.n	80033ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80033f6:	d007      	beq.n	8003408 <HAL_SPI_Init+0xa0>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003400:	d002      	beq.n	8003408 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	ea42 0103 	orr.w	r1, r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003452:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	0c1b      	lsrs	r3, r3, #16
 8003464:	f003 0204 	and.w	r2, r3, #4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003484:	ea42 0103 	orr.w	r1, r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b088      	sub	sp, #32
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	4613      	mov	r3, r2
 80034bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034be:	f7fe f917 	bl	80016f0 <HAL_GetTick>
 80034c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d001      	beq.n	80034d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80034d4:	2302      	movs	r3, #2
 80034d6:	e15c      	b.n	8003792 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_SPI_Transmit+0x36>
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e154      	b.n	8003792 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_SPI_Transmit+0x48>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e14d      	b.n	8003792 <HAL_SPI_Transmit+0x2e4>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2203      	movs	r2, #3
 8003502:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	88fa      	ldrh	r2, [r7, #6]
 8003516:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003548:	d10f      	bne.n	800356a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003558:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003568:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b40      	cmp	r3, #64	@ 0x40
 8003576:	d007      	beq.n	8003588 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003586:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003590:	d952      	bls.n	8003638 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_SPI_Transmit+0xf2>
 800359a:	8b7b      	ldrh	r3, [r7, #26]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d145      	bne.n	800362c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a4:	881a      	ldrh	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b0:	1c9a      	adds	r2, r3, #2
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035c4:	e032      	b.n	800362c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d112      	bne.n	80035fa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035f8:	e018      	b.n	800362c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035fa:	f7fe f879 	bl	80016f0 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d803      	bhi.n	8003612 <HAL_SPI_Transmit+0x164>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003610:	d102      	bne.n	8003618 <HAL_SPI_Transmit+0x16a>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e0b2      	b.n	8003792 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1c7      	bne.n	80035c6 <HAL_SPI_Transmit+0x118>
 8003636:	e083      	b.n	8003740 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_SPI_Transmit+0x198>
 8003640:	8b7b      	ldrh	r3, [r7, #26]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d177      	bne.n	8003736 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	d912      	bls.n	8003676 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003654:	881a      	ldrh	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003660:	1c9a      	adds	r2, r3, #2
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b02      	subs	r3, #2
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003674:	e05f      	b.n	8003736 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	330c      	adds	r3, #12
 8003680:	7812      	ldrb	r2, [r2, #0]
 8003682:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800369c:	e04b      	b.n	8003736 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d12b      	bne.n	8003704 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d912      	bls.n	80036dc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ba:	881a      	ldrh	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c6:	1c9a      	adds	r2, r3, #2
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b02      	subs	r3, #2
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036da:	e02c      	b.n	8003736 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	330c      	adds	r3, #12
 80036e6:	7812      	ldrb	r2, [r2, #0]
 80036e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003702:	e018      	b.n	8003736 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003704:	f7fd fff4 	bl	80016f0 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d803      	bhi.n	800371c <HAL_SPI_Transmit+0x26e>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371a:	d102      	bne.n	8003722 <HAL_SPI_Transmit+0x274>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e02d      	b.n	8003792 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ae      	bne.n	800369e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	6839      	ldr	r1, [r7, #0]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fcf5 	bl	8004134 <SPI_EndRxTxTransaction>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003790:	2300      	movs	r3, #0
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b088      	sub	sp, #32
 800379e:	af02      	add	r7, sp, #8
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d001      	beq.n	80037ba <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	e123      	b.n	8003a02 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037c2:	d112      	bne.n	80037ea <HAL_SPI_Receive+0x50>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10e      	bne.n	80037ea <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2204      	movs	r2, #4
 80037d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037d4:	88fa      	ldrh	r2, [r7, #6]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f912 	bl	8003a0a <HAL_SPI_TransmitReceive>
 80037e6:	4603      	mov	r3, r0
 80037e8:	e10b      	b.n	8003a02 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ea:	f7fd ff81 	bl	80016f0 <HAL_GetTick>
 80037ee:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_SPI_Receive+0x62>
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e100      	b.n	8003a02 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_SPI_Receive+0x74>
 800380a:	2302      	movs	r3, #2
 800380c:	e0f9      	b.n	8003a02 <HAL_SPI_Receive+0x268>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2204      	movs	r2, #4
 800381a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	88fa      	ldrh	r2, [r7, #6]
 800382e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	88fa      	ldrh	r2, [r7, #6]
 8003836:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003860:	d908      	bls.n	8003874 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	e007      	b.n	8003884 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800388c:	d10f      	bne.n	80038ae <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800389c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b8:	2b40      	cmp	r3, #64	@ 0x40
 80038ba:	d007      	beq.n	80038cc <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038d4:	d875      	bhi.n	80039c2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038d6:	e037      	b.n	8003948 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d117      	bne.n	8003916 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f103 020c 	add.w	r2, r3, #12
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	7812      	ldrb	r2, [r2, #0]
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003914:	e018      	b.n	8003948 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003916:	f7fd feeb 	bl	80016f0 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d803      	bhi.n	800392e <HAL_SPI_Receive+0x194>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d102      	bne.n	8003934 <HAL_SPI_Receive+0x19a>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e05c      	b.n	8003a02 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1c1      	bne.n	80038d8 <HAL_SPI_Receive+0x13e>
 8003954:	e03b      	b.n	80039ce <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d115      	bne.n	8003990 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	b292      	uxth	r2, r2
 8003970:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	1c9a      	adds	r2, r3, #2
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800398e:	e018      	b.n	80039c2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003990:	f7fd feae 	bl	80016f0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d803      	bhi.n	80039a8 <HAL_SPI_Receive+0x20e>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a6:	d102      	bne.n	80039ae <HAL_SPI_Receive+0x214>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e01f      	b.n	8003a02 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1c3      	bne.n	8003956 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	6839      	ldr	r1, [r7, #0]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fb56 	bl	8004084 <SPI_EndRxTransaction>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b08a      	sub	sp, #40	@ 0x28
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a1c:	f7fd fe68 	bl	80016f0 <HAL_GetTick>
 8003a20:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a28:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a30:	887b      	ldrh	r3, [r7, #2]
 8003a32:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003a34:	887b      	ldrh	r3, [r7, #2]
 8003a36:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a38:	7ffb      	ldrb	r3, [r7, #31]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d00c      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x4e>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a44:	d106      	bne.n	8003a54 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <HAL_SPI_TransmitReceive+0x4a>
 8003a4e:	7ffb      	ldrb	r3, [r7, #31]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d001      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
 8003a56:	e1f3      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_SPI_TransmitReceive+0x60>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_SPI_TransmitReceive+0x60>
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e1e8      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_SPI_TransmitReceive+0x72>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e1e1      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x436>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d003      	beq.n	8003a98 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2205      	movs	r2, #5
 8003a94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	887a      	ldrh	r2, [r7, #2]
 8003abe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ada:	d802      	bhi.n	8003ae2 <HAL_SPI_TransmitReceive+0xd8>
 8003adc:	8abb      	ldrh	r3, [r7, #20]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d908      	bls.n	8003af4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	e007      	b.n	8003b04 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b02:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0e:	2b40      	cmp	r3, #64	@ 0x40
 8003b10:	d007      	beq.n	8003b22 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b2a:	f240 8083 	bls.w	8003c34 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_SPI_TransmitReceive+0x132>
 8003b36:	8afb      	ldrh	r3, [r7, #22]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d16f      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	1c9a      	adds	r2, r3, #2
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b60:	e05c      	b.n	8003c1c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x19e>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <HAL_SPI_TransmitReceive+0x19e>
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d113      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b84:	881a      	ldrh	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	1c9a      	adds	r2, r3, #2
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d11c      	bne.n	8003bf0 <HAL_SPI_TransmitReceive+0x1e6>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d016      	beq.n	8003bf0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	b292      	uxth	r2, r2
 8003bce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	1c9a      	adds	r2, r3, #2
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bec:	2301      	movs	r3, #1
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bf0:	f7fd fd7e 	bl	80016f0 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d80d      	bhi.n	8003c1c <HAL_SPI_TransmitReceive+0x212>
 8003c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d009      	beq.n	8003c1c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e111      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d19d      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x158>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d197      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x158>
 8003c32:	e0e5      	b.n	8003e00 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_SPI_TransmitReceive+0x23a>
 8003c3c:	8afb      	ldrh	r3, [r7, #22]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	f040 80d1 	bne.w	8003de6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d912      	bls.n	8003c74 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c52:	881a      	ldrh	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	1c9a      	adds	r2, r3, #2
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b02      	subs	r3, #2
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c72:	e0b8      	b.n	8003de6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	330c      	adds	r3, #12
 8003c7e:	7812      	ldrb	r2, [r2, #0]
 8003c80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c9a:	e0a4      	b.n	8003de6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d134      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x30a>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d02f      	beq.n	8003d14 <HAL_SPI_TransmitReceive+0x30a>
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d12c      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d912      	bls.n	8003cea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc8:	881a      	ldrh	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b02      	subs	r3, #2
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ce8:	e012      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d148      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x3aa>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d042      	beq.n	8003db4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d923      	bls.n	8003d82 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	b292      	uxth	r2, r2
 8003d46:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	1c9a      	adds	r2, r3, #2
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b02      	subs	r3, #2
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d81f      	bhi.n	8003db0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	e016      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f103 020c 	add.w	r2, r3, #12
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	7812      	ldrb	r2, [r2, #0]
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003db0:	2301      	movs	r3, #1
 8003db2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003db4:	f7fd fc9c 	bl	80016f0 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d803      	bhi.n	8003dcc <HAL_SPI_TransmitReceive+0x3c2>
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d102      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x3c8>
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e02c      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f47f af55 	bne.w	8003c9c <HAL_SPI_TransmitReceive+0x292>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f47f af4e 	bne.w	8003c9c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e00:	6a3a      	ldr	r2, [r7, #32]
 8003e02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f995 	bl	8004134 <SPI_EndRxTxTransaction>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e00e      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
  }
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3728      	adds	r7, #40	@ 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e58:	f7fd fc4a 	bl	80016f0 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	4413      	add	r3, r2
 8003e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e68:	f7fd fc42 	bl	80016f0 <HAL_GetTick>
 8003e6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e6e:	4b39      	ldr	r3, [pc, #228]	@ (8003f54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	015b      	lsls	r3, r3, #5
 8003e74:	0d1b      	lsrs	r3, r3, #20
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e7e:	e054      	b.n	8003f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d050      	beq.n	8003f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e88:	f7fd fc32 	bl	80016f0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d902      	bls.n	8003e9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d13d      	bne.n	8003f1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eb6:	d111      	bne.n	8003edc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ec0:	d004      	beq.n	8003ecc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eca:	d107      	bne.n	8003edc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee4:	d10f      	bne.n	8003f06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e017      	b.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d19b      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000024 	.word	0x20000024

08003f58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08a      	sub	sp, #40	@ 0x28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f6a:	f7fd fbc1 	bl	80016f0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	4413      	add	r3, r2
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003f7a:	f7fd fbb9 	bl	80016f0 <HAL_GetTick>
 8003f7e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f88:	4b3d      	ldr	r3, [pc, #244]	@ (8004080 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	00da      	lsls	r2, r3, #3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	0d1b      	lsrs	r3, r3, #20
 8003f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003fa0:	e060      	b.n	8004064 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003fa8:	d107      	bne.n	8003fba <SPI_WaitFifoStateUntilTimeout+0x62>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d050      	beq.n	8004064 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fc2:	f7fd fb95 	bl	80016f0 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d902      	bls.n	8003fd8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d13d      	bne.n	8004054 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fe6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ff0:	d111      	bne.n	8004016 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ffa:	d004      	beq.n	8004006 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004004:	d107      	bne.n	8004016 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004014:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800401e:	d10f      	bne.n	8004040 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800403e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e010      	b.n	8004076 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	3b01      	subs	r3, #1
 8004062:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d196      	bne.n	8003fa2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3728      	adds	r7, #40	@ 0x28
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000024 	.word	0x20000024

08004084 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004098:	d111      	bne.n	80040be <SPI_EndRxTransaction+0x3a>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a2:	d004      	beq.n	80040ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ac:	d107      	bne.n	80040be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	2180      	movs	r1, #128	@ 0x80
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f7ff febd 	bl	8003e48 <SPI_WaitFlagStateUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d8:	f043 0220 	orr.w	r2, r3, #32
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e023      	b.n	800412c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ec:	d11d      	bne.n	800412a <SPI_EndRxTransaction+0xa6>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f6:	d004      	beq.n	8004102 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004100:	d113      	bne.n	800412a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2200      	movs	r2, #0
 800410a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f7ff ff22 	bl	8003f58 <SPI_WaitFifoStateUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411e:	f043 0220 	orr.w	r2, r3, #32
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e000      	b.n	800412c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7ff ff03 	bl	8003f58 <SPI_WaitFifoStateUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e027      	b.n	80041b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2200      	movs	r2, #0
 8004170:	2180      	movs	r1, #128	@ 0x80
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff fe68 	bl	8003e48 <SPI_WaitFlagStateUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d007      	beq.n	800418e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004182:	f043 0220 	orr.w	r2, r3, #32
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e014      	b.n	80041b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2200      	movs	r2, #0
 8004196:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff fedc 	bl	8003f58 <SPI_WaitFifoStateUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041aa:	f043 0220 	orr.w	r2, r3, #32
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e000      	b.n	80041b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e049      	b.n	8004266 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd f862 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4610      	mov	r0, r2
 8004200:	f000 fb7a 	bl	80048f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e049      	b.n	8004314 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d106      	bne.n	800429a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f841 	bl	800431c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f000 fb23 	bl	80048f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <HAL_TIM_PWM_Start+0x24>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e03c      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d109      	bne.n	800436e <HAL_TIM_PWM_Start+0x3e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	bf14      	ite	ne
 8004366:	2301      	movne	r3, #1
 8004368:	2300      	moveq	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	e02f      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d109      	bne.n	8004388 <HAL_TIM_PWM_Start+0x58>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e022      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	d109      	bne.n	80043a2 <HAL_TIM_PWM_Start+0x72>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	bf14      	ite	ne
 800439a:	2301      	movne	r3, #1
 800439c:	2300      	moveq	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	e015      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d109      	bne.n	80043bc <HAL_TIM_PWM_Start+0x8c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e008      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e09c      	b.n	8004510 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Start+0xb6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e4:	e023      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xc6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f4:	e01b      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_PWM_Start+0xd6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004404:	e013      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0xe6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004414:	e00b      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b10      	cmp	r3, #16
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0xf6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004424:	e003      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2201      	movs	r2, #1
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fe74 	bl	8005124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a35      	ldr	r2, [pc, #212]	@ (8004518 <HAL_TIM_PWM_Start+0x1e8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <HAL_TIM_PWM_Start+0x13e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a34      	ldr	r2, [pc, #208]	@ (800451c <HAL_TIM_PWM_Start+0x1ec>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00e      	beq.n	800446e <HAL_TIM_PWM_Start+0x13e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a32      	ldr	r2, [pc, #200]	@ (8004520 <HAL_TIM_PWM_Start+0x1f0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_TIM_PWM_Start+0x13e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a31      	ldr	r2, [pc, #196]	@ (8004524 <HAL_TIM_PWM_Start+0x1f4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_TIM_PWM_Start+0x13e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a2f      	ldr	r2, [pc, #188]	@ (8004528 <HAL_TIM_PWM_Start+0x1f8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <HAL_TIM_PWM_Start+0x142>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_TIM_PWM_Start+0x144>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004486:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a22      	ldr	r2, [pc, #136]	@ (8004518 <HAL_TIM_PWM_Start+0x1e8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d01d      	beq.n	80044ce <HAL_TIM_PWM_Start+0x19e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449a:	d018      	beq.n	80044ce <HAL_TIM_PWM_Start+0x19e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a22      	ldr	r2, [pc, #136]	@ (800452c <HAL_TIM_PWM_Start+0x1fc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <HAL_TIM_PWM_Start+0x19e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a21      	ldr	r2, [pc, #132]	@ (8004530 <HAL_TIM_PWM_Start+0x200>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00e      	beq.n	80044ce <HAL_TIM_PWM_Start+0x19e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004534 <HAL_TIM_PWM_Start+0x204>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d009      	beq.n	80044ce <HAL_TIM_PWM_Start+0x19e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a17      	ldr	r2, [pc, #92]	@ (800451c <HAL_TIM_PWM_Start+0x1ec>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d004      	beq.n	80044ce <HAL_TIM_PWM_Start+0x19e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a15      	ldr	r2, [pc, #84]	@ (8004520 <HAL_TIM_PWM_Start+0x1f0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d115      	bne.n	80044fa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	4b18      	ldr	r3, [pc, #96]	@ (8004538 <HAL_TIM_PWM_Start+0x208>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b06      	cmp	r3, #6
 80044de:	d015      	beq.n	800450c <HAL_TIM_PWM_Start+0x1dc>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e6:	d011      	beq.n	800450c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	e008      	b.n	800450c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e000      	b.n	800450e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40013400 	.word	0x40013400
 8004520:	40014000 	.word	0x40014000
 8004524:	40014400 	.word	0x40014400
 8004528:	40014800 	.word	0x40014800
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	00010007 	.word	0x00010007

0800453c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004556:	2302      	movs	r3, #2
 8004558:	e0ff      	b.n	800475a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b14      	cmp	r3, #20
 8004566:	f200 80f0 	bhi.w	800474a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800456a:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	080045c5 	.word	0x080045c5
 8004574:	0800474b 	.word	0x0800474b
 8004578:	0800474b 	.word	0x0800474b
 800457c:	0800474b 	.word	0x0800474b
 8004580:	08004605 	.word	0x08004605
 8004584:	0800474b 	.word	0x0800474b
 8004588:	0800474b 	.word	0x0800474b
 800458c:	0800474b 	.word	0x0800474b
 8004590:	08004647 	.word	0x08004647
 8004594:	0800474b 	.word	0x0800474b
 8004598:	0800474b 	.word	0x0800474b
 800459c:	0800474b 	.word	0x0800474b
 80045a0:	08004687 	.word	0x08004687
 80045a4:	0800474b 	.word	0x0800474b
 80045a8:	0800474b 	.word	0x0800474b
 80045ac:	0800474b 	.word	0x0800474b
 80045b0:	080046c9 	.word	0x080046c9
 80045b4:	0800474b 	.word	0x0800474b
 80045b8:	0800474b 	.word	0x0800474b
 80045bc:	0800474b 	.word	0x0800474b
 80045c0:	08004709 	.word	0x08004709
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fa3a 	bl	8004a44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0208 	orr.w	r2, r2, #8
 80045de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0204 	bic.w	r2, r2, #4
 80045ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6999      	ldr	r1, [r3, #24]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	619a      	str	r2, [r3, #24]
      break;
 8004602:	e0a5      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 faaa 	bl	8004b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800461e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800462e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6999      	ldr	r1, [r3, #24]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	021a      	lsls	r2, r3, #8
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	619a      	str	r2, [r3, #24]
      break;
 8004644:	e084      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fb13 	bl	8004c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0208 	orr.w	r2, r2, #8
 8004660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0204 	bic.w	r2, r2, #4
 8004670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69d9      	ldr	r1, [r3, #28]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	61da      	str	r2, [r3, #28]
      break;
 8004684:	e064      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fb7b 	bl	8004d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69d9      	ldr	r1, [r3, #28]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	021a      	lsls	r2, r3, #8
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	61da      	str	r2, [r3, #28]
      break;
 80046c6:	e043      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fbc4 	bl	8004e5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0208 	orr.w	r2, r2, #8
 80046e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0204 	bic.w	r2, r2, #4
 80046f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004706:	e023      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fc08 	bl	8004f24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004722:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004732:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	021a      	lsls	r2, r3, #8
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004748:	e002      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
      break;
 800474e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004758:	7dfb      	ldrb	r3, [r7, #23]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop

08004764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_TIM_ConfigClockSource+0x1c>
 800477c:	2302      	movs	r3, #2
 800477e:	e0b6      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800479e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047bc:	d03e      	beq.n	800483c <HAL_TIM_ConfigClockSource+0xd8>
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c2:	f200 8087 	bhi.w	80048d4 <HAL_TIM_ConfigClockSource+0x170>
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ca:	f000 8086 	beq.w	80048da <HAL_TIM_ConfigClockSource+0x176>
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d2:	d87f      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x170>
 80047d4:	2b70      	cmp	r3, #112	@ 0x70
 80047d6:	d01a      	beq.n	800480e <HAL_TIM_ConfigClockSource+0xaa>
 80047d8:	2b70      	cmp	r3, #112	@ 0x70
 80047da:	d87b      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x170>
 80047dc:	2b60      	cmp	r3, #96	@ 0x60
 80047de:	d050      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0x11e>
 80047e0:	2b60      	cmp	r3, #96	@ 0x60
 80047e2:	d877      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x170>
 80047e4:	2b50      	cmp	r3, #80	@ 0x50
 80047e6:	d03c      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0xfe>
 80047e8:	2b50      	cmp	r3, #80	@ 0x50
 80047ea:	d873      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x170>
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d058      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x13e>
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	d86f      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x170>
 80047f4:	2b30      	cmp	r3, #48	@ 0x30
 80047f6:	d064      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15e>
 80047f8:	2b30      	cmp	r3, #48	@ 0x30
 80047fa:	d86b      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x170>
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d060      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15e>
 8004800:	2b20      	cmp	r3, #32
 8004802:	d867      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x170>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d05c      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15e>
 8004808:	2b10      	cmp	r3, #16
 800480a:	d05a      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15e>
 800480c:	e062      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800481e:	f000 fc61 	bl	80050e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	609a      	str	r2, [r3, #8]
      break;
 800483a:	e04f      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800484c:	f000 fc4a 	bl	80050e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800485e:	609a      	str	r2, [r3, #8]
      break;
 8004860:	e03c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	461a      	mov	r2, r3
 8004870:	f000 fbbe 	bl	8004ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2150      	movs	r1, #80	@ 0x50
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fc17 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 8004880:	e02c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800488e:	461a      	mov	r2, r3
 8004890:	f000 fbdd 	bl	800504e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2160      	movs	r1, #96	@ 0x60
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fc07 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 80048a0:	e01c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ae:	461a      	mov	r2, r3
 80048b0:	f000 fb9e 	bl	8004ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2140      	movs	r1, #64	@ 0x40
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fbf7 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 80048c0:	e00c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f000 fbee 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 80048d2:	e003      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e000      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a46      	ldr	r2, [pc, #280]	@ (8004a24 <TIM_Base_SetConfig+0x12c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d013      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004916:	d00f      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a43      	ldr	r2, [pc, #268]	@ (8004a28 <TIM_Base_SetConfig+0x130>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a42      	ldr	r2, [pc, #264]	@ (8004a2c <TIM_Base_SetConfig+0x134>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a41      	ldr	r2, [pc, #260]	@ (8004a30 <TIM_Base_SetConfig+0x138>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a40      	ldr	r2, [pc, #256]	@ (8004a34 <TIM_Base_SetConfig+0x13c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800493e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a35      	ldr	r2, [pc, #212]	@ (8004a24 <TIM_Base_SetConfig+0x12c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d01f      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004958:	d01b      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a32      	ldr	r2, [pc, #200]	@ (8004a28 <TIM_Base_SetConfig+0x130>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d017      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a31      	ldr	r2, [pc, #196]	@ (8004a2c <TIM_Base_SetConfig+0x134>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d013      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a30      	ldr	r2, [pc, #192]	@ (8004a30 <TIM_Base_SetConfig+0x138>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00f      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2f      	ldr	r2, [pc, #188]	@ (8004a34 <TIM_Base_SetConfig+0x13c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00b      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a38 <TIM_Base_SetConfig+0x140>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2d      	ldr	r2, [pc, #180]	@ (8004a3c <TIM_Base_SetConfig+0x144>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a40 <TIM_Base_SetConfig+0x148>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d108      	bne.n	80049a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a16      	ldr	r2, [pc, #88]	@ (8004a24 <TIM_Base_SetConfig+0x12c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00f      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a18      	ldr	r2, [pc, #96]	@ (8004a34 <TIM_Base_SetConfig+0x13c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00b      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a17      	ldr	r2, [pc, #92]	@ (8004a38 <TIM_Base_SetConfig+0x140>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a16      	ldr	r2, [pc, #88]	@ (8004a3c <TIM_Base_SetConfig+0x144>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a15      	ldr	r2, [pc, #84]	@ (8004a40 <TIM_Base_SetConfig+0x148>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d103      	bne.n	80049f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d105      	bne.n	8004a16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f023 0201 	bic.w	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]
  }
}
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40012c00 	.word	0x40012c00
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800
 8004a30:	40000c00 	.word	0x40000c00
 8004a34:	40013400 	.word	0x40013400
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40014400 	.word	0x40014400
 8004a40:	40014800 	.word	0x40014800

08004a44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f023 0201 	bic.w	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0302 	bic.w	r3, r3, #2
 8004a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b50 <TIM_OC1_SetConfig+0x10c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00f      	beq.n	8004ac4 <TIM_OC1_SetConfig+0x80>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b54 <TIM_OC1_SetConfig+0x110>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_OC1_SetConfig+0x80>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a2a      	ldr	r2, [pc, #168]	@ (8004b58 <TIM_OC1_SetConfig+0x114>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_OC1_SetConfig+0x80>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a29      	ldr	r2, [pc, #164]	@ (8004b5c <TIM_OC1_SetConfig+0x118>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC1_SetConfig+0x80>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a28      	ldr	r2, [pc, #160]	@ (8004b60 <TIM_OC1_SetConfig+0x11c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d10c      	bne.n	8004ade <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0308 	bic.w	r3, r3, #8
 8004aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f023 0304 	bic.w	r3, r3, #4
 8004adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b50 <TIM_OC1_SetConfig+0x10c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00f      	beq.n	8004b06 <TIM_OC1_SetConfig+0xc2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b54 <TIM_OC1_SetConfig+0x110>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <TIM_OC1_SetConfig+0xc2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a19      	ldr	r2, [pc, #100]	@ (8004b58 <TIM_OC1_SetConfig+0x114>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d007      	beq.n	8004b06 <TIM_OC1_SetConfig+0xc2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a18      	ldr	r2, [pc, #96]	@ (8004b5c <TIM_OC1_SetConfig+0x118>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d003      	beq.n	8004b06 <TIM_OC1_SetConfig+0xc2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a17      	ldr	r2, [pc, #92]	@ (8004b60 <TIM_OC1_SetConfig+0x11c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d111      	bne.n	8004b2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	621a      	str	r2, [r3, #32]
}
 8004b44:	bf00      	nop
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40013400 	.word	0x40013400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800

08004b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f023 0210 	bic.w	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0320 	bic.w	r3, r3, #32
 8004bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a28      	ldr	r2, [pc, #160]	@ (8004c64 <TIM_OC2_SetConfig+0x100>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_OC2_SetConfig+0x6c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a27      	ldr	r2, [pc, #156]	@ (8004c68 <TIM_OC2_SetConfig+0x104>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d10d      	bne.n	8004bec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a1d      	ldr	r2, [pc, #116]	@ (8004c64 <TIM_OC2_SetConfig+0x100>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00f      	beq.n	8004c14 <TIM_OC2_SetConfig+0xb0>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c68 <TIM_OC2_SetConfig+0x104>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <TIM_OC2_SetConfig+0xb0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8004c6c <TIM_OC2_SetConfig+0x108>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_OC2_SetConfig+0xb0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a1a      	ldr	r2, [pc, #104]	@ (8004c70 <TIM_OC2_SetConfig+0x10c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_OC2_SetConfig+0xb0>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a19      	ldr	r2, [pc, #100]	@ (8004c74 <TIM_OC2_SetConfig+0x110>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d113      	bne.n	8004c3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	621a      	str	r2, [r3, #32]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40013400 	.word	0x40013400
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	40014400 	.word	0x40014400
 8004c74:	40014800 	.word	0x40014800

08004c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	021b      	lsls	r3, r3, #8
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a27      	ldr	r2, [pc, #156]	@ (8004d74 <TIM_OC3_SetConfig+0xfc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_OC3_SetConfig+0x6a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a26      	ldr	r2, [pc, #152]	@ (8004d78 <TIM_OC3_SetConfig+0x100>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10d      	bne.n	8004cfe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a1c      	ldr	r2, [pc, #112]	@ (8004d74 <TIM_OC3_SetConfig+0xfc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00f      	beq.n	8004d26 <TIM_OC3_SetConfig+0xae>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1b      	ldr	r2, [pc, #108]	@ (8004d78 <TIM_OC3_SetConfig+0x100>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00b      	beq.n	8004d26 <TIM_OC3_SetConfig+0xae>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a1a      	ldr	r2, [pc, #104]	@ (8004d7c <TIM_OC3_SetConfig+0x104>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <TIM_OC3_SetConfig+0xae>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a19      	ldr	r2, [pc, #100]	@ (8004d80 <TIM_OC3_SetConfig+0x108>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_OC3_SetConfig+0xae>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a18      	ldr	r2, [pc, #96]	@ (8004d84 <TIM_OC3_SetConfig+0x10c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d113      	bne.n	8004d4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	621a      	str	r2, [r3, #32]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40013400 	.word	0x40013400
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40014400 	.word	0x40014400
 8004d84:	40014800 	.word	0x40014800

08004d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	031b      	lsls	r3, r3, #12
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a18      	ldr	r2, [pc, #96]	@ (8004e48 <TIM_OC4_SetConfig+0xc0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00f      	beq.n	8004e0c <TIM_OC4_SetConfig+0x84>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a17      	ldr	r2, [pc, #92]	@ (8004e4c <TIM_OC4_SetConfig+0xc4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <TIM_OC4_SetConfig+0x84>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a16      	ldr	r2, [pc, #88]	@ (8004e50 <TIM_OC4_SetConfig+0xc8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_OC4_SetConfig+0x84>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a15      	ldr	r2, [pc, #84]	@ (8004e54 <TIM_OC4_SetConfig+0xcc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_OC4_SetConfig+0x84>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a14      	ldr	r2, [pc, #80]	@ (8004e58 <TIM_OC4_SetConfig+0xd0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d109      	bne.n	8004e20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	019b      	lsls	r3, r3, #6
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40012c00 	.word	0x40012c00
 8004e4c:	40013400 	.word	0x40013400
 8004e50:	40014000 	.word	0x40014000
 8004e54:	40014400 	.word	0x40014400
 8004e58:	40014800 	.word	0x40014800

08004e5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ea0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	041b      	lsls	r3, r3, #16
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a17      	ldr	r2, [pc, #92]	@ (8004f10 <TIM_OC5_SetConfig+0xb4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00f      	beq.n	8004ed6 <TIM_OC5_SetConfig+0x7a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a16      	ldr	r2, [pc, #88]	@ (8004f14 <TIM_OC5_SetConfig+0xb8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00b      	beq.n	8004ed6 <TIM_OC5_SetConfig+0x7a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a15      	ldr	r2, [pc, #84]	@ (8004f18 <TIM_OC5_SetConfig+0xbc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d007      	beq.n	8004ed6 <TIM_OC5_SetConfig+0x7a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a14      	ldr	r2, [pc, #80]	@ (8004f1c <TIM_OC5_SetConfig+0xc0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d003      	beq.n	8004ed6 <TIM_OC5_SetConfig+0x7a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a13      	ldr	r2, [pc, #76]	@ (8004f20 <TIM_OC5_SetConfig+0xc4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d109      	bne.n	8004eea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004edc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	621a      	str	r2, [r3, #32]
}
 8004f04:	bf00      	nop
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40013400 	.word	0x40013400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800

08004f24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	051b      	lsls	r3, r3, #20
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a18      	ldr	r2, [pc, #96]	@ (8004fdc <TIM_OC6_SetConfig+0xb8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00f      	beq.n	8004fa0 <TIM_OC6_SetConfig+0x7c>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a17      	ldr	r2, [pc, #92]	@ (8004fe0 <TIM_OC6_SetConfig+0xbc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <TIM_OC6_SetConfig+0x7c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a16      	ldr	r2, [pc, #88]	@ (8004fe4 <TIM_OC6_SetConfig+0xc0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_OC6_SetConfig+0x7c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a15      	ldr	r2, [pc, #84]	@ (8004fe8 <TIM_OC6_SetConfig+0xc4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC6_SetConfig+0x7c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a14      	ldr	r2, [pc, #80]	@ (8004fec <TIM_OC6_SetConfig+0xc8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d109      	bne.n	8004fb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	029b      	lsls	r3, r3, #10
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800

08004ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0201 	bic.w	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800501a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f023 030a 	bic.w	r3, r3, #10
 800502c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	621a      	str	r2, [r3, #32]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800504e:	b480      	push	{r7}
 8005050:	b087      	sub	sp, #28
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f023 0210 	bic.w	r2, r3, #16
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	031b      	lsls	r3, r3, #12
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800508a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	621a      	str	r2, [r3, #32]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f043 0307 	orr.w	r3, r3, #7
 80050d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	609a      	str	r2, [r3, #8]
}
 80050d8:	bf00      	nop
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	021a      	lsls	r2, r3, #8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	431a      	orrs	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4313      	orrs	r3, r2
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	609a      	str	r2, [r3, #8]
}
 8005118:	bf00      	nop
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f003 031f 	and.w	r3, r3, #31
 8005136:	2201      	movs	r2, #1
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	43db      	mvns	r3, r3
 8005146:	401a      	ands	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a1a      	ldr	r2, [r3, #32]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	fa01 f303 	lsl.w	r3, r1, r3
 800515c:	431a      	orrs	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
	...

08005170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005184:	2302      	movs	r3, #2
 8005186:	e068      	b.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2d      	ldr	r2, [pc, #180]	@ (800526c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d108      	bne.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d01d      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fa:	d018      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1b      	ldr	r2, [pc, #108]	@ (8005270 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1a      	ldr	r2, [pc, #104]	@ (8005274 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a18      	ldr	r2, [pc, #96]	@ (8005278 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d009      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a13      	ldr	r2, [pc, #76]	@ (800526c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a14      	ldr	r2, [pc, #80]	@ (800527c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10c      	bne.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4313      	orrs	r3, r2
 800523e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40013400 	.word	0x40013400
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40000c00 	.word	0x40000c00
 800527c:	40014000 	.word	0x40014000

08005280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e040      	b.n	8005314 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fc f8ae 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2224      	movs	r2, #36	@ 0x24
 80052ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0201 	bic.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fb6a 	bl	80059a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f8af 	bl	8005430 <UART_SetConfig>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e01b      	b.n	8005314 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fbe9 	bl	8005ae4 <UART_CheckIdleState>
 8005312:	4603      	mov	r3, r0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	@ 0x28
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005330:	2b20      	cmp	r3, #32
 8005332:	d177      	bne.n	8005424 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_UART_Transmit+0x24>
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e070      	b.n	8005426 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2221      	movs	r2, #33	@ 0x21
 8005350:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005352:	f7fc f9cd 	bl	80016f0 <HAL_GetTick>
 8005356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005370:	d108      	bne.n	8005384 <HAL_UART_Transmit+0x68>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d104      	bne.n	8005384 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800537a:	2300      	movs	r3, #0
 800537c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	e003      	b.n	800538c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800538c:	e02f      	b.n	80053ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2200      	movs	r2, #0
 8005396:	2180      	movs	r1, #128	@ 0x80
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fc4b 	bl	8005c34 <UART_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e03b      	b.n	8005426 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10b      	bne.n	80053cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	881a      	ldrh	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c0:	b292      	uxth	r2, r2
 80053c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	3302      	adds	r3, #2
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	e007      	b.n	80053dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	3301      	adds	r3, #1
 80053da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1c9      	bne.n	800538e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2200      	movs	r2, #0
 8005402:	2140      	movs	r1, #64	@ 0x40
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fc15 	bl	8005c34 <UART_WaitOnFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e005      	b.n	8005426 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	e000      	b.n	8005426 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005424:	2302      	movs	r3, #2
  }
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b08a      	sub	sp, #40	@ 0x28
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	431a      	orrs	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	431a      	orrs	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	4313      	orrs	r3, r2
 8005456:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4ba4      	ldr	r3, [pc, #656]	@ (80056f0 <UART_SetConfig+0x2c0>)
 8005460:	4013      	ands	r3, r2
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005468:	430b      	orrs	r3, r1
 800546a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a99      	ldr	r2, [pc, #612]	@ (80056f4 <UART_SetConfig+0x2c4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005498:	4313      	orrs	r3, r2
 800549a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ac:	430a      	orrs	r2, r1
 80054ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a90      	ldr	r2, [pc, #576]	@ (80056f8 <UART_SetConfig+0x2c8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d126      	bne.n	8005508 <UART_SetConfig+0xd8>
 80054ba:	4b90      	ldr	r3, [pc, #576]	@ (80056fc <UART_SetConfig+0x2cc>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d81b      	bhi.n	8005500 <UART_SetConfig+0xd0>
 80054c8:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <UART_SetConfig+0xa0>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	080054e1 	.word	0x080054e1
 80054d4:	080054f1 	.word	0x080054f1
 80054d8:	080054e9 	.word	0x080054e9
 80054dc:	080054f9 	.word	0x080054f9
 80054e0:	2301      	movs	r3, #1
 80054e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054e6:	e116      	b.n	8005716 <UART_SetConfig+0x2e6>
 80054e8:	2302      	movs	r3, #2
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ee:	e112      	b.n	8005716 <UART_SetConfig+0x2e6>
 80054f0:	2304      	movs	r3, #4
 80054f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054f6:	e10e      	b.n	8005716 <UART_SetConfig+0x2e6>
 80054f8:	2308      	movs	r3, #8
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054fe:	e10a      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005500:	2310      	movs	r3, #16
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005506:	e106      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a7c      	ldr	r2, [pc, #496]	@ (8005700 <UART_SetConfig+0x2d0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d138      	bne.n	8005584 <UART_SetConfig+0x154>
 8005512:	4b7a      	ldr	r3, [pc, #488]	@ (80056fc <UART_SetConfig+0x2cc>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005518:	f003 030c 	and.w	r3, r3, #12
 800551c:	2b0c      	cmp	r3, #12
 800551e:	d82d      	bhi.n	800557c <UART_SetConfig+0x14c>
 8005520:	a201      	add	r2, pc, #4	@ (adr r2, 8005528 <UART_SetConfig+0xf8>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	0800555d 	.word	0x0800555d
 800552c:	0800557d 	.word	0x0800557d
 8005530:	0800557d 	.word	0x0800557d
 8005534:	0800557d 	.word	0x0800557d
 8005538:	0800556d 	.word	0x0800556d
 800553c:	0800557d 	.word	0x0800557d
 8005540:	0800557d 	.word	0x0800557d
 8005544:	0800557d 	.word	0x0800557d
 8005548:	08005565 	.word	0x08005565
 800554c:	0800557d 	.word	0x0800557d
 8005550:	0800557d 	.word	0x0800557d
 8005554:	0800557d 	.word	0x0800557d
 8005558:	08005575 	.word	0x08005575
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005562:	e0d8      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005564:	2302      	movs	r3, #2
 8005566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800556a:	e0d4      	b.n	8005716 <UART_SetConfig+0x2e6>
 800556c:	2304      	movs	r3, #4
 800556e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005572:	e0d0      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005574:	2308      	movs	r3, #8
 8005576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800557a:	e0cc      	b.n	8005716 <UART_SetConfig+0x2e6>
 800557c:	2310      	movs	r3, #16
 800557e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005582:	e0c8      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a5e      	ldr	r2, [pc, #376]	@ (8005704 <UART_SetConfig+0x2d4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d125      	bne.n	80055da <UART_SetConfig+0x1aa>
 800558e:	4b5b      	ldr	r3, [pc, #364]	@ (80056fc <UART_SetConfig+0x2cc>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005594:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005598:	2b30      	cmp	r3, #48	@ 0x30
 800559a:	d016      	beq.n	80055ca <UART_SetConfig+0x19a>
 800559c:	2b30      	cmp	r3, #48	@ 0x30
 800559e:	d818      	bhi.n	80055d2 <UART_SetConfig+0x1a2>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d00a      	beq.n	80055ba <UART_SetConfig+0x18a>
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	d814      	bhi.n	80055d2 <UART_SetConfig+0x1a2>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <UART_SetConfig+0x182>
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d008      	beq.n	80055c2 <UART_SetConfig+0x192>
 80055b0:	e00f      	b.n	80055d2 <UART_SetConfig+0x1a2>
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b8:	e0ad      	b.n	8005716 <UART_SetConfig+0x2e6>
 80055ba:	2302      	movs	r3, #2
 80055bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055c0:	e0a9      	b.n	8005716 <UART_SetConfig+0x2e6>
 80055c2:	2304      	movs	r3, #4
 80055c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055c8:	e0a5      	b.n	8005716 <UART_SetConfig+0x2e6>
 80055ca:	2308      	movs	r3, #8
 80055cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055d0:	e0a1      	b.n	8005716 <UART_SetConfig+0x2e6>
 80055d2:	2310      	movs	r3, #16
 80055d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055d8:	e09d      	b.n	8005716 <UART_SetConfig+0x2e6>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a4a      	ldr	r2, [pc, #296]	@ (8005708 <UART_SetConfig+0x2d8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d125      	bne.n	8005630 <UART_SetConfig+0x200>
 80055e4:	4b45      	ldr	r3, [pc, #276]	@ (80056fc <UART_SetConfig+0x2cc>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80055f0:	d016      	beq.n	8005620 <UART_SetConfig+0x1f0>
 80055f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80055f4:	d818      	bhi.n	8005628 <UART_SetConfig+0x1f8>
 80055f6:	2b80      	cmp	r3, #128	@ 0x80
 80055f8:	d00a      	beq.n	8005610 <UART_SetConfig+0x1e0>
 80055fa:	2b80      	cmp	r3, #128	@ 0x80
 80055fc:	d814      	bhi.n	8005628 <UART_SetConfig+0x1f8>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <UART_SetConfig+0x1d8>
 8005602:	2b40      	cmp	r3, #64	@ 0x40
 8005604:	d008      	beq.n	8005618 <UART_SetConfig+0x1e8>
 8005606:	e00f      	b.n	8005628 <UART_SetConfig+0x1f8>
 8005608:	2300      	movs	r3, #0
 800560a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800560e:	e082      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005610:	2302      	movs	r3, #2
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005616:	e07e      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005618:	2304      	movs	r3, #4
 800561a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800561e:	e07a      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005620:	2308      	movs	r3, #8
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005626:	e076      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005628:	2310      	movs	r3, #16
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800562e:	e072      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a35      	ldr	r2, [pc, #212]	@ (800570c <UART_SetConfig+0x2dc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d12a      	bne.n	8005690 <UART_SetConfig+0x260>
 800563a:	4b30      	ldr	r3, [pc, #192]	@ (80056fc <UART_SetConfig+0x2cc>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005640:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005644:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005648:	d01a      	beq.n	8005680 <UART_SetConfig+0x250>
 800564a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800564e:	d81b      	bhi.n	8005688 <UART_SetConfig+0x258>
 8005650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005654:	d00c      	beq.n	8005670 <UART_SetConfig+0x240>
 8005656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800565a:	d815      	bhi.n	8005688 <UART_SetConfig+0x258>
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <UART_SetConfig+0x238>
 8005660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005664:	d008      	beq.n	8005678 <UART_SetConfig+0x248>
 8005666:	e00f      	b.n	8005688 <UART_SetConfig+0x258>
 8005668:	2300      	movs	r3, #0
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800566e:	e052      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005670:	2302      	movs	r3, #2
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005676:	e04e      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005678:	2304      	movs	r3, #4
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800567e:	e04a      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005680:	2308      	movs	r3, #8
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005686:	e046      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005688:	2310      	movs	r3, #16
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800568e:	e042      	b.n	8005716 <UART_SetConfig+0x2e6>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a17      	ldr	r2, [pc, #92]	@ (80056f4 <UART_SetConfig+0x2c4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d13a      	bne.n	8005710 <UART_SetConfig+0x2e0>
 800569a:	4b18      	ldr	r3, [pc, #96]	@ (80056fc <UART_SetConfig+0x2cc>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056a8:	d01a      	beq.n	80056e0 <UART_SetConfig+0x2b0>
 80056aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056ae:	d81b      	bhi.n	80056e8 <UART_SetConfig+0x2b8>
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056b4:	d00c      	beq.n	80056d0 <UART_SetConfig+0x2a0>
 80056b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ba:	d815      	bhi.n	80056e8 <UART_SetConfig+0x2b8>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <UART_SetConfig+0x298>
 80056c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c4:	d008      	beq.n	80056d8 <UART_SetConfig+0x2a8>
 80056c6:	e00f      	b.n	80056e8 <UART_SetConfig+0x2b8>
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ce:	e022      	b.n	8005716 <UART_SetConfig+0x2e6>
 80056d0:	2302      	movs	r3, #2
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056d6:	e01e      	b.n	8005716 <UART_SetConfig+0x2e6>
 80056d8:	2304      	movs	r3, #4
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056de:	e01a      	b.n	8005716 <UART_SetConfig+0x2e6>
 80056e0:	2308      	movs	r3, #8
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056e6:	e016      	b.n	8005716 <UART_SetConfig+0x2e6>
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ee:	e012      	b.n	8005716 <UART_SetConfig+0x2e6>
 80056f0:	efff69f3 	.word	0xefff69f3
 80056f4:	40008000 	.word	0x40008000
 80056f8:	40013800 	.word	0x40013800
 80056fc:	40021000 	.word	0x40021000
 8005700:	40004400 	.word	0x40004400
 8005704:	40004800 	.word	0x40004800
 8005708:	40004c00 	.word	0x40004c00
 800570c:	40005000 	.word	0x40005000
 8005710:	2310      	movs	r3, #16
 8005712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a9f      	ldr	r2, [pc, #636]	@ (8005998 <UART_SetConfig+0x568>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d17a      	bne.n	8005816 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005720:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005724:	2b08      	cmp	r3, #8
 8005726:	d824      	bhi.n	8005772 <UART_SetConfig+0x342>
 8005728:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <UART_SetConfig+0x300>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	08005755 	.word	0x08005755
 8005734:	08005773 	.word	0x08005773
 8005738:	0800575d 	.word	0x0800575d
 800573c:	08005773 	.word	0x08005773
 8005740:	08005763 	.word	0x08005763
 8005744:	08005773 	.word	0x08005773
 8005748:	08005773 	.word	0x08005773
 800574c:	08005773 	.word	0x08005773
 8005750:	0800576b 	.word	0x0800576b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005754:	f7fd f8c0 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8005758:	61f8      	str	r0, [r7, #28]
        break;
 800575a:	e010      	b.n	800577e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800575c:	4b8f      	ldr	r3, [pc, #572]	@ (800599c <UART_SetConfig+0x56c>)
 800575e:	61fb      	str	r3, [r7, #28]
        break;
 8005760:	e00d      	b.n	800577e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005762:	f7fd f821 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8005766:	61f8      	str	r0, [r7, #28]
        break;
 8005768:	e009      	b.n	800577e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576e:	61fb      	str	r3, [r7, #28]
        break;
 8005770:	e005      	b.n	800577e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800577c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80fb 	beq.w	800597c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	4613      	mov	r3, r2
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	4413      	add	r3, r2
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	429a      	cmp	r2, r3
 8005794:	d305      	bcc.n	80057a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d903      	bls.n	80057aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057a8:	e0e8      	b.n	800597c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	2200      	movs	r2, #0
 80057ae:	461c      	mov	r4, r3
 80057b0:	4615      	mov	r5, r2
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	022b      	lsls	r3, r5, #8
 80057bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80057c0:	0222      	lsls	r2, r4, #8
 80057c2:	68f9      	ldr	r1, [r7, #12]
 80057c4:	6849      	ldr	r1, [r1, #4]
 80057c6:	0849      	lsrs	r1, r1, #1
 80057c8:	2000      	movs	r0, #0
 80057ca:	4688      	mov	r8, r1
 80057cc:	4681      	mov	r9, r0
 80057ce:	eb12 0a08 	adds.w	sl, r2, r8
 80057d2:	eb43 0b09 	adc.w	fp, r3, r9
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e4:	4650      	mov	r0, sl
 80057e6:	4659      	mov	r1, fp
 80057e8:	f7fa fd4a 	bl	8000280 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4613      	mov	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057fa:	d308      	bcc.n	800580e <UART_SetConfig+0x3de>
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005802:	d204      	bcs.n	800580e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	60da      	str	r2, [r3, #12]
 800580c:	e0b6      	b.n	800597c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005814:	e0b2      	b.n	800597c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800581e:	d15e      	bne.n	80058de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005820:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005824:	2b08      	cmp	r3, #8
 8005826:	d828      	bhi.n	800587a <UART_SetConfig+0x44a>
 8005828:	a201      	add	r2, pc, #4	@ (adr r2, 8005830 <UART_SetConfig+0x400>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005855 	.word	0x08005855
 8005834:	0800585d 	.word	0x0800585d
 8005838:	08005865 	.word	0x08005865
 800583c:	0800587b 	.word	0x0800587b
 8005840:	0800586b 	.word	0x0800586b
 8005844:	0800587b 	.word	0x0800587b
 8005848:	0800587b 	.word	0x0800587b
 800584c:	0800587b 	.word	0x0800587b
 8005850:	08005873 	.word	0x08005873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005854:	f7fd f840 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8005858:	61f8      	str	r0, [r7, #28]
        break;
 800585a:	e014      	b.n	8005886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800585c:	f7fd f852 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 8005860:	61f8      	str	r0, [r7, #28]
        break;
 8005862:	e010      	b.n	8005886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005864:	4b4d      	ldr	r3, [pc, #308]	@ (800599c <UART_SetConfig+0x56c>)
 8005866:	61fb      	str	r3, [r7, #28]
        break;
 8005868:	e00d      	b.n	8005886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800586a:	f7fc ff9d 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 800586e:	61f8      	str	r0, [r7, #28]
        break;
 8005870:	e009      	b.n	8005886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005876:	61fb      	str	r3, [r7, #28]
        break;
 8005878:	e005      	b.n	8005886 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d077      	beq.n	800597c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	005a      	lsls	r2, r3, #1
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	441a      	add	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	2b0f      	cmp	r3, #15
 80058a6:	d916      	bls.n	80058d6 <UART_SetConfig+0x4a6>
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ae:	d212      	bcs.n	80058d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	f023 030f 	bic.w	r3, r3, #15
 80058b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	085b      	lsrs	r3, r3, #1
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	8afb      	ldrh	r3, [r7, #22]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	8afa      	ldrh	r2, [r7, #22]
 80058d2:	60da      	str	r2, [r3, #12]
 80058d4:	e052      	b.n	800597c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058dc:	e04e      	b.n	800597c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d827      	bhi.n	8005936 <UART_SetConfig+0x506>
 80058e6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ec <UART_SetConfig+0x4bc>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005919 	.word	0x08005919
 80058f4:	08005921 	.word	0x08005921
 80058f8:	08005937 	.word	0x08005937
 80058fc:	08005927 	.word	0x08005927
 8005900:	08005937 	.word	0x08005937
 8005904:	08005937 	.word	0x08005937
 8005908:	08005937 	.word	0x08005937
 800590c:	0800592f 	.word	0x0800592f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005910:	f7fc ffe2 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8005914:	61f8      	str	r0, [r7, #28]
        break;
 8005916:	e014      	b.n	8005942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005918:	f7fc fff4 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 800591c:	61f8      	str	r0, [r7, #28]
        break;
 800591e:	e010      	b.n	8005942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005920:	4b1e      	ldr	r3, [pc, #120]	@ (800599c <UART_SetConfig+0x56c>)
 8005922:	61fb      	str	r3, [r7, #28]
        break;
 8005924:	e00d      	b.n	8005942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005926:	f7fc ff3f 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 800592a:	61f8      	str	r0, [r7, #28]
        break;
 800592c:	e009      	b.n	8005942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800592e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005932:	61fb      	str	r3, [r7, #28]
        break;
 8005934:	e005      	b.n	8005942 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005940:	bf00      	nop
    }

    if (pclk != 0U)
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d019      	beq.n	800597c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	085a      	lsrs	r2, r3, #1
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	441a      	add	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	fbb2 f3f3 	udiv	r3, r2, r3
 800595a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b0f      	cmp	r3, #15
 8005960:	d909      	bls.n	8005976 <UART_SetConfig+0x546>
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005968:	d205      	bcs.n	8005976 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60da      	str	r2, [r3, #12]
 8005974:	e002      	b.n	800597c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005988:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800598c:	4618      	mov	r0, r3
 800598e:	3728      	adds	r7, #40	@ 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005996:	bf00      	nop
 8005998:	40008000 	.word	0x40008000
 800599c:	00f42400 	.word	0x00f42400

080059a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01a      	beq.n	8005ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a9e:	d10a      	bne.n	8005ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	605a      	str	r2, [r3, #4]
  }
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b098      	sub	sp, #96	@ 0x60
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005af4:	f7fb fdfc 	bl	80016f0 <HAL_GetTick>
 8005af8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d12e      	bne.n	8005b66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b10:	2200      	movs	r2, #0
 8005b12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f88c 	bl	8005c34 <UART_WaitOnFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d021      	beq.n	8005b66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	e853 3f00 	ldrex	r3, [r3]
 8005b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e6      	bne.n	8005b22 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e062      	b.n	8005c2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d149      	bne.n	8005c08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f856 	bl	8005c34 <UART_WaitOnFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d03c      	beq.n	8005c08 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e6      	bne.n	8005b8e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3308      	adds	r3, #8
 8005bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005be0:	61fa      	str	r2, [r7, #28]
 8005be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	69b9      	ldr	r1, [r7, #24]
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	617b      	str	r3, [r7, #20]
   return(result);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e5      	bne.n	8005bc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e011      	b.n	8005c2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3758      	adds	r7, #88	@ 0x58
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c44:	e04f      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4c:	d04b      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4e:	f7fb fd4f 	bl	80016f0 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d302      	bcc.n	8005c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e04e      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d037      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b80      	cmp	r3, #128	@ 0x80
 8005c7a:	d034      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b40      	cmp	r3, #64	@ 0x40
 8005c80:	d031      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d110      	bne.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2208      	movs	r2, #8
 8005c96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f838 	bl	8005d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e029      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cc0:	d111      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f81e 	bl	8005d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e00f      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	bf0c      	ite	eq
 8005cf6:	2301      	moveq	r3, #1
 8005cf8:	2300      	movne	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d0a0      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b095      	sub	sp, #84	@ 0x54
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d34:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3308      	adds	r3, #8
 8005d66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e5      	bne.n	8005d48 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d118      	bne.n	8005db6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f023 0310 	bic.w	r3, r3, #16
 8005d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6979      	ldr	r1, [r7, #20]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	613b      	str	r3, [r7, #16]
   return(result);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e6      	bne.n	8005d84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005dca:	bf00      	nop
 8005dcc:	3754      	adds	r7, #84	@ 0x54
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
	...

08005dd8 <siprintf>:
 8005dd8:	b40e      	push	{r1, r2, r3}
 8005dda:	b510      	push	{r4, lr}
 8005ddc:	b09d      	sub	sp, #116	@ 0x74
 8005dde:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005de0:	9002      	str	r0, [sp, #8]
 8005de2:	9006      	str	r0, [sp, #24]
 8005de4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005de8:	480a      	ldr	r0, [pc, #40]	@ (8005e14 <siprintf+0x3c>)
 8005dea:	9107      	str	r1, [sp, #28]
 8005dec:	9104      	str	r1, [sp, #16]
 8005dee:	490a      	ldr	r1, [pc, #40]	@ (8005e18 <siprintf+0x40>)
 8005df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005df4:	9105      	str	r1, [sp, #20]
 8005df6:	2400      	movs	r4, #0
 8005df8:	a902      	add	r1, sp, #8
 8005dfa:	6800      	ldr	r0, [r0, #0]
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005e00:	f000 f994 	bl	800612c <_svfiprintf_r>
 8005e04:	9b02      	ldr	r3, [sp, #8]
 8005e06:	701c      	strb	r4, [r3, #0]
 8005e08:	b01d      	add	sp, #116	@ 0x74
 8005e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0e:	b003      	add	sp, #12
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000030 	.word	0x20000030
 8005e18:	ffff0208 	.word	0xffff0208

08005e1c <memset>:
 8005e1c:	4402      	add	r2, r0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d100      	bne.n	8005e26 <memset+0xa>
 8005e24:	4770      	bx	lr
 8005e26:	f803 1b01 	strb.w	r1, [r3], #1
 8005e2a:	e7f9      	b.n	8005e20 <memset+0x4>

08005e2c <__errno>:
 8005e2c:	4b01      	ldr	r3, [pc, #4]	@ (8005e34 <__errno+0x8>)
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	20000030 	.word	0x20000030

08005e38 <__libc_init_array>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8005e70 <__libc_init_array+0x38>)
 8005e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8005e74 <__libc_init_array+0x3c>)
 8005e3e:	1b64      	subs	r4, r4, r5
 8005e40:	10a4      	asrs	r4, r4, #2
 8005e42:	2600      	movs	r6, #0
 8005e44:	42a6      	cmp	r6, r4
 8005e46:	d109      	bne.n	8005e5c <__libc_init_array+0x24>
 8005e48:	4d0b      	ldr	r5, [pc, #44]	@ (8005e78 <__libc_init_array+0x40>)
 8005e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8005e7c <__libc_init_array+0x44>)
 8005e4c:	f000 fc64 	bl	8006718 <_init>
 8005e50:	1b64      	subs	r4, r4, r5
 8005e52:	10a4      	asrs	r4, r4, #2
 8005e54:	2600      	movs	r6, #0
 8005e56:	42a6      	cmp	r6, r4
 8005e58:	d105      	bne.n	8005e66 <__libc_init_array+0x2e>
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}
 8005e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e60:	4798      	blx	r3
 8005e62:	3601      	adds	r6, #1
 8005e64:	e7ee      	b.n	8005e44 <__libc_init_array+0xc>
 8005e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6a:	4798      	blx	r3
 8005e6c:	3601      	adds	r6, #1
 8005e6e:	e7f2      	b.n	8005e56 <__libc_init_array+0x1e>
 8005e70:	080067d0 	.word	0x080067d0
 8005e74:	080067d0 	.word	0x080067d0
 8005e78:	080067d0 	.word	0x080067d0
 8005e7c:	080067d4 	.word	0x080067d4

08005e80 <__retarget_lock_acquire_recursive>:
 8005e80:	4770      	bx	lr

08005e82 <__retarget_lock_release_recursive>:
 8005e82:	4770      	bx	lr

08005e84 <_free_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4605      	mov	r5, r0
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	d041      	beq.n	8005f10 <_free_r+0x8c>
 8005e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e90:	1f0c      	subs	r4, r1, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bfb8      	it	lt
 8005e96:	18e4      	addlt	r4, r4, r3
 8005e98:	f000 f8e0 	bl	800605c <__malloc_lock>
 8005e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f14 <_free_r+0x90>)
 8005e9e:	6813      	ldr	r3, [r2, #0]
 8005ea0:	b933      	cbnz	r3, 8005eb0 <_free_r+0x2c>
 8005ea2:	6063      	str	r3, [r4, #4]
 8005ea4:	6014      	str	r4, [r2, #0]
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eac:	f000 b8dc 	b.w	8006068 <__malloc_unlock>
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	d908      	bls.n	8005ec6 <_free_r+0x42>
 8005eb4:	6820      	ldr	r0, [r4, #0]
 8005eb6:	1821      	adds	r1, r4, r0
 8005eb8:	428b      	cmp	r3, r1
 8005eba:	bf01      	itttt	eq
 8005ebc:	6819      	ldreq	r1, [r3, #0]
 8005ebe:	685b      	ldreq	r3, [r3, #4]
 8005ec0:	1809      	addeq	r1, r1, r0
 8005ec2:	6021      	streq	r1, [r4, #0]
 8005ec4:	e7ed      	b.n	8005ea2 <_free_r+0x1e>
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	b10b      	cbz	r3, 8005ed0 <_free_r+0x4c>
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	d9fa      	bls.n	8005ec6 <_free_r+0x42>
 8005ed0:	6811      	ldr	r1, [r2, #0]
 8005ed2:	1850      	adds	r0, r2, r1
 8005ed4:	42a0      	cmp	r0, r4
 8005ed6:	d10b      	bne.n	8005ef0 <_free_r+0x6c>
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	4401      	add	r1, r0
 8005edc:	1850      	adds	r0, r2, r1
 8005ede:	4283      	cmp	r3, r0
 8005ee0:	6011      	str	r1, [r2, #0]
 8005ee2:	d1e0      	bne.n	8005ea6 <_free_r+0x22>
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	6053      	str	r3, [r2, #4]
 8005eea:	4408      	add	r0, r1
 8005eec:	6010      	str	r0, [r2, #0]
 8005eee:	e7da      	b.n	8005ea6 <_free_r+0x22>
 8005ef0:	d902      	bls.n	8005ef8 <_free_r+0x74>
 8005ef2:	230c      	movs	r3, #12
 8005ef4:	602b      	str	r3, [r5, #0]
 8005ef6:	e7d6      	b.n	8005ea6 <_free_r+0x22>
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	1821      	adds	r1, r4, r0
 8005efc:	428b      	cmp	r3, r1
 8005efe:	bf04      	itt	eq
 8005f00:	6819      	ldreq	r1, [r3, #0]
 8005f02:	685b      	ldreq	r3, [r3, #4]
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	bf04      	itt	eq
 8005f08:	1809      	addeq	r1, r1, r0
 8005f0a:	6021      	streq	r1, [r4, #0]
 8005f0c:	6054      	str	r4, [r2, #4]
 8005f0e:	e7ca      	b.n	8005ea6 <_free_r+0x22>
 8005f10:	bd38      	pop	{r3, r4, r5, pc}
 8005f12:	bf00      	nop
 8005f14:	2000037c 	.word	0x2000037c

08005f18 <sbrk_aligned>:
 8005f18:	b570      	push	{r4, r5, r6, lr}
 8005f1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005f58 <sbrk_aligned+0x40>)
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	6831      	ldr	r1, [r6, #0]
 8005f20:	4605      	mov	r5, r0
 8005f22:	b911      	cbnz	r1, 8005f2a <sbrk_aligned+0x12>
 8005f24:	f000 fba4 	bl	8006670 <_sbrk_r>
 8005f28:	6030      	str	r0, [r6, #0]
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	f000 fb9f 	bl	8006670 <_sbrk_r>
 8005f32:	1c43      	adds	r3, r0, #1
 8005f34:	d103      	bne.n	8005f3e <sbrk_aligned+0x26>
 8005f36:	f04f 34ff 	mov.w	r4, #4294967295
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
 8005f3e:	1cc4      	adds	r4, r0, #3
 8005f40:	f024 0403 	bic.w	r4, r4, #3
 8005f44:	42a0      	cmp	r0, r4
 8005f46:	d0f8      	beq.n	8005f3a <sbrk_aligned+0x22>
 8005f48:	1a21      	subs	r1, r4, r0
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f000 fb90 	bl	8006670 <_sbrk_r>
 8005f50:	3001      	adds	r0, #1
 8005f52:	d1f2      	bne.n	8005f3a <sbrk_aligned+0x22>
 8005f54:	e7ef      	b.n	8005f36 <sbrk_aligned+0x1e>
 8005f56:	bf00      	nop
 8005f58:	20000378 	.word	0x20000378

08005f5c <_malloc_r>:
 8005f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f60:	1ccd      	adds	r5, r1, #3
 8005f62:	f025 0503 	bic.w	r5, r5, #3
 8005f66:	3508      	adds	r5, #8
 8005f68:	2d0c      	cmp	r5, #12
 8005f6a:	bf38      	it	cc
 8005f6c:	250c      	movcc	r5, #12
 8005f6e:	2d00      	cmp	r5, #0
 8005f70:	4606      	mov	r6, r0
 8005f72:	db01      	blt.n	8005f78 <_malloc_r+0x1c>
 8005f74:	42a9      	cmp	r1, r5
 8005f76:	d904      	bls.n	8005f82 <_malloc_r+0x26>
 8005f78:	230c      	movs	r3, #12
 8005f7a:	6033      	str	r3, [r6, #0]
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006058 <_malloc_r+0xfc>
 8005f86:	f000 f869 	bl	800605c <__malloc_lock>
 8005f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f8e:	461c      	mov	r4, r3
 8005f90:	bb44      	cbnz	r4, 8005fe4 <_malloc_r+0x88>
 8005f92:	4629      	mov	r1, r5
 8005f94:	4630      	mov	r0, r6
 8005f96:	f7ff ffbf 	bl	8005f18 <sbrk_aligned>
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	d158      	bne.n	8006052 <_malloc_r+0xf6>
 8005fa0:	f8d8 4000 	ldr.w	r4, [r8]
 8005fa4:	4627      	mov	r7, r4
 8005fa6:	2f00      	cmp	r7, #0
 8005fa8:	d143      	bne.n	8006032 <_malloc_r+0xd6>
 8005faa:	2c00      	cmp	r4, #0
 8005fac:	d04b      	beq.n	8006046 <_malloc_r+0xea>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	eb04 0903 	add.w	r9, r4, r3
 8005fb8:	f000 fb5a 	bl	8006670 <_sbrk_r>
 8005fbc:	4581      	cmp	r9, r0
 8005fbe:	d142      	bne.n	8006046 <_malloc_r+0xea>
 8005fc0:	6821      	ldr	r1, [r4, #0]
 8005fc2:	1a6d      	subs	r5, r5, r1
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f7ff ffa6 	bl	8005f18 <sbrk_aligned>
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d03a      	beq.n	8006046 <_malloc_r+0xea>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	442b      	add	r3, r5
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	bb62      	cbnz	r2, 8006038 <_malloc_r+0xdc>
 8005fde:	f8c8 7000 	str.w	r7, [r8]
 8005fe2:	e00f      	b.n	8006004 <_malloc_r+0xa8>
 8005fe4:	6822      	ldr	r2, [r4, #0]
 8005fe6:	1b52      	subs	r2, r2, r5
 8005fe8:	d420      	bmi.n	800602c <_malloc_r+0xd0>
 8005fea:	2a0b      	cmp	r2, #11
 8005fec:	d917      	bls.n	800601e <_malloc_r+0xc2>
 8005fee:	1961      	adds	r1, r4, r5
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	6025      	str	r5, [r4, #0]
 8005ff4:	bf18      	it	ne
 8005ff6:	6059      	strne	r1, [r3, #4]
 8005ff8:	6863      	ldr	r3, [r4, #4]
 8005ffa:	bf08      	it	eq
 8005ffc:	f8c8 1000 	streq.w	r1, [r8]
 8006000:	5162      	str	r2, [r4, r5]
 8006002:	604b      	str	r3, [r1, #4]
 8006004:	4630      	mov	r0, r6
 8006006:	f000 f82f 	bl	8006068 <__malloc_unlock>
 800600a:	f104 000b 	add.w	r0, r4, #11
 800600e:	1d23      	adds	r3, r4, #4
 8006010:	f020 0007 	bic.w	r0, r0, #7
 8006014:	1ac2      	subs	r2, r0, r3
 8006016:	bf1c      	itt	ne
 8006018:	1a1b      	subne	r3, r3, r0
 800601a:	50a3      	strne	r3, [r4, r2]
 800601c:	e7af      	b.n	8005f7e <_malloc_r+0x22>
 800601e:	6862      	ldr	r2, [r4, #4]
 8006020:	42a3      	cmp	r3, r4
 8006022:	bf0c      	ite	eq
 8006024:	f8c8 2000 	streq.w	r2, [r8]
 8006028:	605a      	strne	r2, [r3, #4]
 800602a:	e7eb      	b.n	8006004 <_malloc_r+0xa8>
 800602c:	4623      	mov	r3, r4
 800602e:	6864      	ldr	r4, [r4, #4]
 8006030:	e7ae      	b.n	8005f90 <_malloc_r+0x34>
 8006032:	463c      	mov	r4, r7
 8006034:	687f      	ldr	r7, [r7, #4]
 8006036:	e7b6      	b.n	8005fa6 <_malloc_r+0x4a>
 8006038:	461a      	mov	r2, r3
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	42a3      	cmp	r3, r4
 800603e:	d1fb      	bne.n	8006038 <_malloc_r+0xdc>
 8006040:	2300      	movs	r3, #0
 8006042:	6053      	str	r3, [r2, #4]
 8006044:	e7de      	b.n	8006004 <_malloc_r+0xa8>
 8006046:	230c      	movs	r3, #12
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	4630      	mov	r0, r6
 800604c:	f000 f80c 	bl	8006068 <__malloc_unlock>
 8006050:	e794      	b.n	8005f7c <_malloc_r+0x20>
 8006052:	6005      	str	r5, [r0, #0]
 8006054:	e7d6      	b.n	8006004 <_malloc_r+0xa8>
 8006056:	bf00      	nop
 8006058:	2000037c 	.word	0x2000037c

0800605c <__malloc_lock>:
 800605c:	4801      	ldr	r0, [pc, #4]	@ (8006064 <__malloc_lock+0x8>)
 800605e:	f7ff bf0f 	b.w	8005e80 <__retarget_lock_acquire_recursive>
 8006062:	bf00      	nop
 8006064:	20000374 	.word	0x20000374

08006068 <__malloc_unlock>:
 8006068:	4801      	ldr	r0, [pc, #4]	@ (8006070 <__malloc_unlock+0x8>)
 800606a:	f7ff bf0a 	b.w	8005e82 <__retarget_lock_release_recursive>
 800606e:	bf00      	nop
 8006070:	20000374 	.word	0x20000374

08006074 <__ssputs_r>:
 8006074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006078:	688e      	ldr	r6, [r1, #8]
 800607a:	461f      	mov	r7, r3
 800607c:	42be      	cmp	r6, r7
 800607e:	680b      	ldr	r3, [r1, #0]
 8006080:	4682      	mov	sl, r0
 8006082:	460c      	mov	r4, r1
 8006084:	4690      	mov	r8, r2
 8006086:	d82d      	bhi.n	80060e4 <__ssputs_r+0x70>
 8006088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800608c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006090:	d026      	beq.n	80060e0 <__ssputs_r+0x6c>
 8006092:	6965      	ldr	r5, [r4, #20]
 8006094:	6909      	ldr	r1, [r1, #16]
 8006096:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800609a:	eba3 0901 	sub.w	r9, r3, r1
 800609e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060a2:	1c7b      	adds	r3, r7, #1
 80060a4:	444b      	add	r3, r9
 80060a6:	106d      	asrs	r5, r5, #1
 80060a8:	429d      	cmp	r5, r3
 80060aa:	bf38      	it	cc
 80060ac:	461d      	movcc	r5, r3
 80060ae:	0553      	lsls	r3, r2, #21
 80060b0:	d527      	bpl.n	8006102 <__ssputs_r+0x8e>
 80060b2:	4629      	mov	r1, r5
 80060b4:	f7ff ff52 	bl	8005f5c <_malloc_r>
 80060b8:	4606      	mov	r6, r0
 80060ba:	b360      	cbz	r0, 8006116 <__ssputs_r+0xa2>
 80060bc:	6921      	ldr	r1, [r4, #16]
 80060be:	464a      	mov	r2, r9
 80060c0:	f000 fae6 	bl	8006690 <memcpy>
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80060ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	6126      	str	r6, [r4, #16]
 80060d2:	6165      	str	r5, [r4, #20]
 80060d4:	444e      	add	r6, r9
 80060d6:	eba5 0509 	sub.w	r5, r5, r9
 80060da:	6026      	str	r6, [r4, #0]
 80060dc:	60a5      	str	r5, [r4, #8]
 80060de:	463e      	mov	r6, r7
 80060e0:	42be      	cmp	r6, r7
 80060e2:	d900      	bls.n	80060e6 <__ssputs_r+0x72>
 80060e4:	463e      	mov	r6, r7
 80060e6:	6820      	ldr	r0, [r4, #0]
 80060e8:	4632      	mov	r2, r6
 80060ea:	4641      	mov	r1, r8
 80060ec:	f000 faa6 	bl	800663c <memmove>
 80060f0:	68a3      	ldr	r3, [r4, #8]
 80060f2:	1b9b      	subs	r3, r3, r6
 80060f4:	60a3      	str	r3, [r4, #8]
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	4433      	add	r3, r6
 80060fa:	6023      	str	r3, [r4, #0]
 80060fc:	2000      	movs	r0, #0
 80060fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006102:	462a      	mov	r2, r5
 8006104:	f000 fad2 	bl	80066ac <_realloc_r>
 8006108:	4606      	mov	r6, r0
 800610a:	2800      	cmp	r0, #0
 800610c:	d1e0      	bne.n	80060d0 <__ssputs_r+0x5c>
 800610e:	6921      	ldr	r1, [r4, #16]
 8006110:	4650      	mov	r0, sl
 8006112:	f7ff feb7 	bl	8005e84 <_free_r>
 8006116:	230c      	movs	r3, #12
 8006118:	f8ca 3000 	str.w	r3, [sl]
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006122:	81a3      	strh	r3, [r4, #12]
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	e7e9      	b.n	80060fe <__ssputs_r+0x8a>
	...

0800612c <_svfiprintf_r>:
 800612c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006130:	4698      	mov	r8, r3
 8006132:	898b      	ldrh	r3, [r1, #12]
 8006134:	061b      	lsls	r3, r3, #24
 8006136:	b09d      	sub	sp, #116	@ 0x74
 8006138:	4607      	mov	r7, r0
 800613a:	460d      	mov	r5, r1
 800613c:	4614      	mov	r4, r2
 800613e:	d510      	bpl.n	8006162 <_svfiprintf_r+0x36>
 8006140:	690b      	ldr	r3, [r1, #16]
 8006142:	b973      	cbnz	r3, 8006162 <_svfiprintf_r+0x36>
 8006144:	2140      	movs	r1, #64	@ 0x40
 8006146:	f7ff ff09 	bl	8005f5c <_malloc_r>
 800614a:	6028      	str	r0, [r5, #0]
 800614c:	6128      	str	r0, [r5, #16]
 800614e:	b930      	cbnz	r0, 800615e <_svfiprintf_r+0x32>
 8006150:	230c      	movs	r3, #12
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	f04f 30ff 	mov.w	r0, #4294967295
 8006158:	b01d      	add	sp, #116	@ 0x74
 800615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615e:	2340      	movs	r3, #64	@ 0x40
 8006160:	616b      	str	r3, [r5, #20]
 8006162:	2300      	movs	r3, #0
 8006164:	9309      	str	r3, [sp, #36]	@ 0x24
 8006166:	2320      	movs	r3, #32
 8006168:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800616c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006170:	2330      	movs	r3, #48	@ 0x30
 8006172:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006310 <_svfiprintf_r+0x1e4>
 8006176:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800617a:	f04f 0901 	mov.w	r9, #1
 800617e:	4623      	mov	r3, r4
 8006180:	469a      	mov	sl, r3
 8006182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006186:	b10a      	cbz	r2, 800618c <_svfiprintf_r+0x60>
 8006188:	2a25      	cmp	r2, #37	@ 0x25
 800618a:	d1f9      	bne.n	8006180 <_svfiprintf_r+0x54>
 800618c:	ebba 0b04 	subs.w	fp, sl, r4
 8006190:	d00b      	beq.n	80061aa <_svfiprintf_r+0x7e>
 8006192:	465b      	mov	r3, fp
 8006194:	4622      	mov	r2, r4
 8006196:	4629      	mov	r1, r5
 8006198:	4638      	mov	r0, r7
 800619a:	f7ff ff6b 	bl	8006074 <__ssputs_r>
 800619e:	3001      	adds	r0, #1
 80061a0:	f000 80a7 	beq.w	80062f2 <_svfiprintf_r+0x1c6>
 80061a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061a6:	445a      	add	r2, fp
 80061a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80061aa:	f89a 3000 	ldrb.w	r3, [sl]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 809f 	beq.w	80062f2 <_svfiprintf_r+0x1c6>
 80061b4:	2300      	movs	r3, #0
 80061b6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061be:	f10a 0a01 	add.w	sl, sl, #1
 80061c2:	9304      	str	r3, [sp, #16]
 80061c4:	9307      	str	r3, [sp, #28]
 80061c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80061cc:	4654      	mov	r4, sl
 80061ce:	2205      	movs	r2, #5
 80061d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d4:	484e      	ldr	r0, [pc, #312]	@ (8006310 <_svfiprintf_r+0x1e4>)
 80061d6:	f7fa f803 	bl	80001e0 <memchr>
 80061da:	9a04      	ldr	r2, [sp, #16]
 80061dc:	b9d8      	cbnz	r0, 8006216 <_svfiprintf_r+0xea>
 80061de:	06d0      	lsls	r0, r2, #27
 80061e0:	bf44      	itt	mi
 80061e2:	2320      	movmi	r3, #32
 80061e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061e8:	0711      	lsls	r1, r2, #28
 80061ea:	bf44      	itt	mi
 80061ec:	232b      	movmi	r3, #43	@ 0x2b
 80061ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061f2:	f89a 3000 	ldrb.w	r3, [sl]
 80061f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80061f8:	d015      	beq.n	8006226 <_svfiprintf_r+0xfa>
 80061fa:	9a07      	ldr	r2, [sp, #28]
 80061fc:	4654      	mov	r4, sl
 80061fe:	2000      	movs	r0, #0
 8006200:	f04f 0c0a 	mov.w	ip, #10
 8006204:	4621      	mov	r1, r4
 8006206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800620a:	3b30      	subs	r3, #48	@ 0x30
 800620c:	2b09      	cmp	r3, #9
 800620e:	d94b      	bls.n	80062a8 <_svfiprintf_r+0x17c>
 8006210:	b1b0      	cbz	r0, 8006240 <_svfiprintf_r+0x114>
 8006212:	9207      	str	r2, [sp, #28]
 8006214:	e014      	b.n	8006240 <_svfiprintf_r+0x114>
 8006216:	eba0 0308 	sub.w	r3, r0, r8
 800621a:	fa09 f303 	lsl.w	r3, r9, r3
 800621e:	4313      	orrs	r3, r2
 8006220:	9304      	str	r3, [sp, #16]
 8006222:	46a2      	mov	sl, r4
 8006224:	e7d2      	b.n	80061cc <_svfiprintf_r+0xa0>
 8006226:	9b03      	ldr	r3, [sp, #12]
 8006228:	1d19      	adds	r1, r3, #4
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	9103      	str	r1, [sp, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	bfbb      	ittet	lt
 8006232:	425b      	neglt	r3, r3
 8006234:	f042 0202 	orrlt.w	r2, r2, #2
 8006238:	9307      	strge	r3, [sp, #28]
 800623a:	9307      	strlt	r3, [sp, #28]
 800623c:	bfb8      	it	lt
 800623e:	9204      	strlt	r2, [sp, #16]
 8006240:	7823      	ldrb	r3, [r4, #0]
 8006242:	2b2e      	cmp	r3, #46	@ 0x2e
 8006244:	d10a      	bne.n	800625c <_svfiprintf_r+0x130>
 8006246:	7863      	ldrb	r3, [r4, #1]
 8006248:	2b2a      	cmp	r3, #42	@ 0x2a
 800624a:	d132      	bne.n	80062b2 <_svfiprintf_r+0x186>
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	1d1a      	adds	r2, r3, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	9203      	str	r2, [sp, #12]
 8006254:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006258:	3402      	adds	r4, #2
 800625a:	9305      	str	r3, [sp, #20]
 800625c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006320 <_svfiprintf_r+0x1f4>
 8006260:	7821      	ldrb	r1, [r4, #0]
 8006262:	2203      	movs	r2, #3
 8006264:	4650      	mov	r0, sl
 8006266:	f7f9 ffbb 	bl	80001e0 <memchr>
 800626a:	b138      	cbz	r0, 800627c <_svfiprintf_r+0x150>
 800626c:	9b04      	ldr	r3, [sp, #16]
 800626e:	eba0 000a 	sub.w	r0, r0, sl
 8006272:	2240      	movs	r2, #64	@ 0x40
 8006274:	4082      	lsls	r2, r0
 8006276:	4313      	orrs	r3, r2
 8006278:	3401      	adds	r4, #1
 800627a:	9304      	str	r3, [sp, #16]
 800627c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006280:	4824      	ldr	r0, [pc, #144]	@ (8006314 <_svfiprintf_r+0x1e8>)
 8006282:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006286:	2206      	movs	r2, #6
 8006288:	f7f9 ffaa 	bl	80001e0 <memchr>
 800628c:	2800      	cmp	r0, #0
 800628e:	d036      	beq.n	80062fe <_svfiprintf_r+0x1d2>
 8006290:	4b21      	ldr	r3, [pc, #132]	@ (8006318 <_svfiprintf_r+0x1ec>)
 8006292:	bb1b      	cbnz	r3, 80062dc <_svfiprintf_r+0x1b0>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	3307      	adds	r3, #7
 8006298:	f023 0307 	bic.w	r3, r3, #7
 800629c:	3308      	adds	r3, #8
 800629e:	9303      	str	r3, [sp, #12]
 80062a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a2:	4433      	add	r3, r6
 80062a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062a6:	e76a      	b.n	800617e <_svfiprintf_r+0x52>
 80062a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ac:	460c      	mov	r4, r1
 80062ae:	2001      	movs	r0, #1
 80062b0:	e7a8      	b.n	8006204 <_svfiprintf_r+0xd8>
 80062b2:	2300      	movs	r3, #0
 80062b4:	3401      	adds	r4, #1
 80062b6:	9305      	str	r3, [sp, #20]
 80062b8:	4619      	mov	r1, r3
 80062ba:	f04f 0c0a 	mov.w	ip, #10
 80062be:	4620      	mov	r0, r4
 80062c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062c4:	3a30      	subs	r2, #48	@ 0x30
 80062c6:	2a09      	cmp	r2, #9
 80062c8:	d903      	bls.n	80062d2 <_svfiprintf_r+0x1a6>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0c6      	beq.n	800625c <_svfiprintf_r+0x130>
 80062ce:	9105      	str	r1, [sp, #20]
 80062d0:	e7c4      	b.n	800625c <_svfiprintf_r+0x130>
 80062d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80062d6:	4604      	mov	r4, r0
 80062d8:	2301      	movs	r3, #1
 80062da:	e7f0      	b.n	80062be <_svfiprintf_r+0x192>
 80062dc:	ab03      	add	r3, sp, #12
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	462a      	mov	r2, r5
 80062e2:	4b0e      	ldr	r3, [pc, #56]	@ (800631c <_svfiprintf_r+0x1f0>)
 80062e4:	a904      	add	r1, sp, #16
 80062e6:	4638      	mov	r0, r7
 80062e8:	f3af 8000 	nop.w
 80062ec:	1c42      	adds	r2, r0, #1
 80062ee:	4606      	mov	r6, r0
 80062f0:	d1d6      	bne.n	80062a0 <_svfiprintf_r+0x174>
 80062f2:	89ab      	ldrh	r3, [r5, #12]
 80062f4:	065b      	lsls	r3, r3, #25
 80062f6:	f53f af2d 	bmi.w	8006154 <_svfiprintf_r+0x28>
 80062fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062fc:	e72c      	b.n	8006158 <_svfiprintf_r+0x2c>
 80062fe:	ab03      	add	r3, sp, #12
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	462a      	mov	r2, r5
 8006304:	4b05      	ldr	r3, [pc, #20]	@ (800631c <_svfiprintf_r+0x1f0>)
 8006306:	a904      	add	r1, sp, #16
 8006308:	4638      	mov	r0, r7
 800630a:	f000 f879 	bl	8006400 <_printf_i>
 800630e:	e7ed      	b.n	80062ec <_svfiprintf_r+0x1c0>
 8006310:	08006794 	.word	0x08006794
 8006314:	0800679e 	.word	0x0800679e
 8006318:	00000000 	.word	0x00000000
 800631c:	08006075 	.word	0x08006075
 8006320:	0800679a 	.word	0x0800679a

08006324 <_printf_common>:
 8006324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006328:	4616      	mov	r6, r2
 800632a:	4698      	mov	r8, r3
 800632c:	688a      	ldr	r2, [r1, #8]
 800632e:	690b      	ldr	r3, [r1, #16]
 8006330:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006334:	4293      	cmp	r3, r2
 8006336:	bfb8      	it	lt
 8006338:	4613      	movlt	r3, r2
 800633a:	6033      	str	r3, [r6, #0]
 800633c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006340:	4607      	mov	r7, r0
 8006342:	460c      	mov	r4, r1
 8006344:	b10a      	cbz	r2, 800634a <_printf_common+0x26>
 8006346:	3301      	adds	r3, #1
 8006348:	6033      	str	r3, [r6, #0]
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	0699      	lsls	r1, r3, #26
 800634e:	bf42      	ittt	mi
 8006350:	6833      	ldrmi	r3, [r6, #0]
 8006352:	3302      	addmi	r3, #2
 8006354:	6033      	strmi	r3, [r6, #0]
 8006356:	6825      	ldr	r5, [r4, #0]
 8006358:	f015 0506 	ands.w	r5, r5, #6
 800635c:	d106      	bne.n	800636c <_printf_common+0x48>
 800635e:	f104 0a19 	add.w	sl, r4, #25
 8006362:	68e3      	ldr	r3, [r4, #12]
 8006364:	6832      	ldr	r2, [r6, #0]
 8006366:	1a9b      	subs	r3, r3, r2
 8006368:	42ab      	cmp	r3, r5
 800636a:	dc26      	bgt.n	80063ba <_printf_common+0x96>
 800636c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006370:	6822      	ldr	r2, [r4, #0]
 8006372:	3b00      	subs	r3, #0
 8006374:	bf18      	it	ne
 8006376:	2301      	movne	r3, #1
 8006378:	0692      	lsls	r2, r2, #26
 800637a:	d42b      	bmi.n	80063d4 <_printf_common+0xb0>
 800637c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006380:	4641      	mov	r1, r8
 8006382:	4638      	mov	r0, r7
 8006384:	47c8      	blx	r9
 8006386:	3001      	adds	r0, #1
 8006388:	d01e      	beq.n	80063c8 <_printf_common+0xa4>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	6922      	ldr	r2, [r4, #16]
 800638e:	f003 0306 	and.w	r3, r3, #6
 8006392:	2b04      	cmp	r3, #4
 8006394:	bf02      	ittt	eq
 8006396:	68e5      	ldreq	r5, [r4, #12]
 8006398:	6833      	ldreq	r3, [r6, #0]
 800639a:	1aed      	subeq	r5, r5, r3
 800639c:	68a3      	ldr	r3, [r4, #8]
 800639e:	bf0c      	ite	eq
 80063a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063a4:	2500      	movne	r5, #0
 80063a6:	4293      	cmp	r3, r2
 80063a8:	bfc4      	itt	gt
 80063aa:	1a9b      	subgt	r3, r3, r2
 80063ac:	18ed      	addgt	r5, r5, r3
 80063ae:	2600      	movs	r6, #0
 80063b0:	341a      	adds	r4, #26
 80063b2:	42b5      	cmp	r5, r6
 80063b4:	d11a      	bne.n	80063ec <_printf_common+0xc8>
 80063b6:	2000      	movs	r0, #0
 80063b8:	e008      	b.n	80063cc <_printf_common+0xa8>
 80063ba:	2301      	movs	r3, #1
 80063bc:	4652      	mov	r2, sl
 80063be:	4641      	mov	r1, r8
 80063c0:	4638      	mov	r0, r7
 80063c2:	47c8      	blx	r9
 80063c4:	3001      	adds	r0, #1
 80063c6:	d103      	bne.n	80063d0 <_printf_common+0xac>
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d0:	3501      	adds	r5, #1
 80063d2:	e7c6      	b.n	8006362 <_printf_common+0x3e>
 80063d4:	18e1      	adds	r1, r4, r3
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	2030      	movs	r0, #48	@ 0x30
 80063da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063de:	4422      	add	r2, r4
 80063e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063e8:	3302      	adds	r3, #2
 80063ea:	e7c7      	b.n	800637c <_printf_common+0x58>
 80063ec:	2301      	movs	r3, #1
 80063ee:	4622      	mov	r2, r4
 80063f0:	4641      	mov	r1, r8
 80063f2:	4638      	mov	r0, r7
 80063f4:	47c8      	blx	r9
 80063f6:	3001      	adds	r0, #1
 80063f8:	d0e6      	beq.n	80063c8 <_printf_common+0xa4>
 80063fa:	3601      	adds	r6, #1
 80063fc:	e7d9      	b.n	80063b2 <_printf_common+0x8e>
	...

08006400 <_printf_i>:
 8006400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006404:	7e0f      	ldrb	r7, [r1, #24]
 8006406:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006408:	2f78      	cmp	r7, #120	@ 0x78
 800640a:	4691      	mov	r9, r2
 800640c:	4680      	mov	r8, r0
 800640e:	460c      	mov	r4, r1
 8006410:	469a      	mov	sl, r3
 8006412:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006416:	d807      	bhi.n	8006428 <_printf_i+0x28>
 8006418:	2f62      	cmp	r7, #98	@ 0x62
 800641a:	d80a      	bhi.n	8006432 <_printf_i+0x32>
 800641c:	2f00      	cmp	r7, #0
 800641e:	f000 80d1 	beq.w	80065c4 <_printf_i+0x1c4>
 8006422:	2f58      	cmp	r7, #88	@ 0x58
 8006424:	f000 80b8 	beq.w	8006598 <_printf_i+0x198>
 8006428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800642c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006430:	e03a      	b.n	80064a8 <_printf_i+0xa8>
 8006432:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006436:	2b15      	cmp	r3, #21
 8006438:	d8f6      	bhi.n	8006428 <_printf_i+0x28>
 800643a:	a101      	add	r1, pc, #4	@ (adr r1, 8006440 <_printf_i+0x40>)
 800643c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006440:	08006499 	.word	0x08006499
 8006444:	080064ad 	.word	0x080064ad
 8006448:	08006429 	.word	0x08006429
 800644c:	08006429 	.word	0x08006429
 8006450:	08006429 	.word	0x08006429
 8006454:	08006429 	.word	0x08006429
 8006458:	080064ad 	.word	0x080064ad
 800645c:	08006429 	.word	0x08006429
 8006460:	08006429 	.word	0x08006429
 8006464:	08006429 	.word	0x08006429
 8006468:	08006429 	.word	0x08006429
 800646c:	080065ab 	.word	0x080065ab
 8006470:	080064d7 	.word	0x080064d7
 8006474:	08006565 	.word	0x08006565
 8006478:	08006429 	.word	0x08006429
 800647c:	08006429 	.word	0x08006429
 8006480:	080065cd 	.word	0x080065cd
 8006484:	08006429 	.word	0x08006429
 8006488:	080064d7 	.word	0x080064d7
 800648c:	08006429 	.word	0x08006429
 8006490:	08006429 	.word	0x08006429
 8006494:	0800656d 	.word	0x0800656d
 8006498:	6833      	ldr	r3, [r6, #0]
 800649a:	1d1a      	adds	r2, r3, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6032      	str	r2, [r6, #0]
 80064a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064a8:	2301      	movs	r3, #1
 80064aa:	e09c      	b.n	80065e6 <_printf_i+0x1e6>
 80064ac:	6833      	ldr	r3, [r6, #0]
 80064ae:	6820      	ldr	r0, [r4, #0]
 80064b0:	1d19      	adds	r1, r3, #4
 80064b2:	6031      	str	r1, [r6, #0]
 80064b4:	0606      	lsls	r6, r0, #24
 80064b6:	d501      	bpl.n	80064bc <_printf_i+0xbc>
 80064b8:	681d      	ldr	r5, [r3, #0]
 80064ba:	e003      	b.n	80064c4 <_printf_i+0xc4>
 80064bc:	0645      	lsls	r5, r0, #25
 80064be:	d5fb      	bpl.n	80064b8 <_printf_i+0xb8>
 80064c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064c4:	2d00      	cmp	r5, #0
 80064c6:	da03      	bge.n	80064d0 <_printf_i+0xd0>
 80064c8:	232d      	movs	r3, #45	@ 0x2d
 80064ca:	426d      	negs	r5, r5
 80064cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064d0:	4858      	ldr	r0, [pc, #352]	@ (8006634 <_printf_i+0x234>)
 80064d2:	230a      	movs	r3, #10
 80064d4:	e011      	b.n	80064fa <_printf_i+0xfa>
 80064d6:	6821      	ldr	r1, [r4, #0]
 80064d8:	6833      	ldr	r3, [r6, #0]
 80064da:	0608      	lsls	r0, r1, #24
 80064dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80064e0:	d402      	bmi.n	80064e8 <_printf_i+0xe8>
 80064e2:	0649      	lsls	r1, r1, #25
 80064e4:	bf48      	it	mi
 80064e6:	b2ad      	uxthmi	r5, r5
 80064e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80064ea:	4852      	ldr	r0, [pc, #328]	@ (8006634 <_printf_i+0x234>)
 80064ec:	6033      	str	r3, [r6, #0]
 80064ee:	bf14      	ite	ne
 80064f0:	230a      	movne	r3, #10
 80064f2:	2308      	moveq	r3, #8
 80064f4:	2100      	movs	r1, #0
 80064f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064fa:	6866      	ldr	r6, [r4, #4]
 80064fc:	60a6      	str	r6, [r4, #8]
 80064fe:	2e00      	cmp	r6, #0
 8006500:	db05      	blt.n	800650e <_printf_i+0x10e>
 8006502:	6821      	ldr	r1, [r4, #0]
 8006504:	432e      	orrs	r6, r5
 8006506:	f021 0104 	bic.w	r1, r1, #4
 800650a:	6021      	str	r1, [r4, #0]
 800650c:	d04b      	beq.n	80065a6 <_printf_i+0x1a6>
 800650e:	4616      	mov	r6, r2
 8006510:	fbb5 f1f3 	udiv	r1, r5, r3
 8006514:	fb03 5711 	mls	r7, r3, r1, r5
 8006518:	5dc7      	ldrb	r7, [r0, r7]
 800651a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800651e:	462f      	mov	r7, r5
 8006520:	42bb      	cmp	r3, r7
 8006522:	460d      	mov	r5, r1
 8006524:	d9f4      	bls.n	8006510 <_printf_i+0x110>
 8006526:	2b08      	cmp	r3, #8
 8006528:	d10b      	bne.n	8006542 <_printf_i+0x142>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	07df      	lsls	r7, r3, #31
 800652e:	d508      	bpl.n	8006542 <_printf_i+0x142>
 8006530:	6923      	ldr	r3, [r4, #16]
 8006532:	6861      	ldr	r1, [r4, #4]
 8006534:	4299      	cmp	r1, r3
 8006536:	bfde      	ittt	le
 8006538:	2330      	movle	r3, #48	@ 0x30
 800653a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800653e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006542:	1b92      	subs	r2, r2, r6
 8006544:	6122      	str	r2, [r4, #16]
 8006546:	f8cd a000 	str.w	sl, [sp]
 800654a:	464b      	mov	r3, r9
 800654c:	aa03      	add	r2, sp, #12
 800654e:	4621      	mov	r1, r4
 8006550:	4640      	mov	r0, r8
 8006552:	f7ff fee7 	bl	8006324 <_printf_common>
 8006556:	3001      	adds	r0, #1
 8006558:	d14a      	bne.n	80065f0 <_printf_i+0x1f0>
 800655a:	f04f 30ff 	mov.w	r0, #4294967295
 800655e:	b004      	add	sp, #16
 8006560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	f043 0320 	orr.w	r3, r3, #32
 800656a:	6023      	str	r3, [r4, #0]
 800656c:	4832      	ldr	r0, [pc, #200]	@ (8006638 <_printf_i+0x238>)
 800656e:	2778      	movs	r7, #120	@ 0x78
 8006570:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	6831      	ldr	r1, [r6, #0]
 8006578:	061f      	lsls	r7, r3, #24
 800657a:	f851 5b04 	ldr.w	r5, [r1], #4
 800657e:	d402      	bmi.n	8006586 <_printf_i+0x186>
 8006580:	065f      	lsls	r7, r3, #25
 8006582:	bf48      	it	mi
 8006584:	b2ad      	uxthmi	r5, r5
 8006586:	6031      	str	r1, [r6, #0]
 8006588:	07d9      	lsls	r1, r3, #31
 800658a:	bf44      	itt	mi
 800658c:	f043 0320 	orrmi.w	r3, r3, #32
 8006590:	6023      	strmi	r3, [r4, #0]
 8006592:	b11d      	cbz	r5, 800659c <_printf_i+0x19c>
 8006594:	2310      	movs	r3, #16
 8006596:	e7ad      	b.n	80064f4 <_printf_i+0xf4>
 8006598:	4826      	ldr	r0, [pc, #152]	@ (8006634 <_printf_i+0x234>)
 800659a:	e7e9      	b.n	8006570 <_printf_i+0x170>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	f023 0320 	bic.w	r3, r3, #32
 80065a2:	6023      	str	r3, [r4, #0]
 80065a4:	e7f6      	b.n	8006594 <_printf_i+0x194>
 80065a6:	4616      	mov	r6, r2
 80065a8:	e7bd      	b.n	8006526 <_printf_i+0x126>
 80065aa:	6833      	ldr	r3, [r6, #0]
 80065ac:	6825      	ldr	r5, [r4, #0]
 80065ae:	6961      	ldr	r1, [r4, #20]
 80065b0:	1d18      	adds	r0, r3, #4
 80065b2:	6030      	str	r0, [r6, #0]
 80065b4:	062e      	lsls	r6, r5, #24
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	d501      	bpl.n	80065be <_printf_i+0x1be>
 80065ba:	6019      	str	r1, [r3, #0]
 80065bc:	e002      	b.n	80065c4 <_printf_i+0x1c4>
 80065be:	0668      	lsls	r0, r5, #25
 80065c0:	d5fb      	bpl.n	80065ba <_printf_i+0x1ba>
 80065c2:	8019      	strh	r1, [r3, #0]
 80065c4:	2300      	movs	r3, #0
 80065c6:	6123      	str	r3, [r4, #16]
 80065c8:	4616      	mov	r6, r2
 80065ca:	e7bc      	b.n	8006546 <_printf_i+0x146>
 80065cc:	6833      	ldr	r3, [r6, #0]
 80065ce:	1d1a      	adds	r2, r3, #4
 80065d0:	6032      	str	r2, [r6, #0]
 80065d2:	681e      	ldr	r6, [r3, #0]
 80065d4:	6862      	ldr	r2, [r4, #4]
 80065d6:	2100      	movs	r1, #0
 80065d8:	4630      	mov	r0, r6
 80065da:	f7f9 fe01 	bl	80001e0 <memchr>
 80065de:	b108      	cbz	r0, 80065e4 <_printf_i+0x1e4>
 80065e0:	1b80      	subs	r0, r0, r6
 80065e2:	6060      	str	r0, [r4, #4]
 80065e4:	6863      	ldr	r3, [r4, #4]
 80065e6:	6123      	str	r3, [r4, #16]
 80065e8:	2300      	movs	r3, #0
 80065ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ee:	e7aa      	b.n	8006546 <_printf_i+0x146>
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	4632      	mov	r2, r6
 80065f4:	4649      	mov	r1, r9
 80065f6:	4640      	mov	r0, r8
 80065f8:	47d0      	blx	sl
 80065fa:	3001      	adds	r0, #1
 80065fc:	d0ad      	beq.n	800655a <_printf_i+0x15a>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	079b      	lsls	r3, r3, #30
 8006602:	d413      	bmi.n	800662c <_printf_i+0x22c>
 8006604:	68e0      	ldr	r0, [r4, #12]
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	4298      	cmp	r0, r3
 800660a:	bfb8      	it	lt
 800660c:	4618      	movlt	r0, r3
 800660e:	e7a6      	b.n	800655e <_printf_i+0x15e>
 8006610:	2301      	movs	r3, #1
 8006612:	4632      	mov	r2, r6
 8006614:	4649      	mov	r1, r9
 8006616:	4640      	mov	r0, r8
 8006618:	47d0      	blx	sl
 800661a:	3001      	adds	r0, #1
 800661c:	d09d      	beq.n	800655a <_printf_i+0x15a>
 800661e:	3501      	adds	r5, #1
 8006620:	68e3      	ldr	r3, [r4, #12]
 8006622:	9903      	ldr	r1, [sp, #12]
 8006624:	1a5b      	subs	r3, r3, r1
 8006626:	42ab      	cmp	r3, r5
 8006628:	dcf2      	bgt.n	8006610 <_printf_i+0x210>
 800662a:	e7eb      	b.n	8006604 <_printf_i+0x204>
 800662c:	2500      	movs	r5, #0
 800662e:	f104 0619 	add.w	r6, r4, #25
 8006632:	e7f5      	b.n	8006620 <_printf_i+0x220>
 8006634:	080067a5 	.word	0x080067a5
 8006638:	080067b6 	.word	0x080067b6

0800663c <memmove>:
 800663c:	4288      	cmp	r0, r1
 800663e:	b510      	push	{r4, lr}
 8006640:	eb01 0402 	add.w	r4, r1, r2
 8006644:	d902      	bls.n	800664c <memmove+0x10>
 8006646:	4284      	cmp	r4, r0
 8006648:	4623      	mov	r3, r4
 800664a:	d807      	bhi.n	800665c <memmove+0x20>
 800664c:	1e43      	subs	r3, r0, #1
 800664e:	42a1      	cmp	r1, r4
 8006650:	d008      	beq.n	8006664 <memmove+0x28>
 8006652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800665a:	e7f8      	b.n	800664e <memmove+0x12>
 800665c:	4402      	add	r2, r0
 800665e:	4601      	mov	r1, r0
 8006660:	428a      	cmp	r2, r1
 8006662:	d100      	bne.n	8006666 <memmove+0x2a>
 8006664:	bd10      	pop	{r4, pc}
 8006666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800666a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800666e:	e7f7      	b.n	8006660 <memmove+0x24>

08006670 <_sbrk_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d06      	ldr	r5, [pc, #24]	@ (800668c <_sbrk_r+0x1c>)
 8006674:	2300      	movs	r3, #0
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	f7fa ff56 	bl	800152c <_sbrk>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_sbrk_r+0x1a>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_sbrk_r+0x1a>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	20000370 	.word	0x20000370

08006690 <memcpy>:
 8006690:	440a      	add	r2, r1
 8006692:	4291      	cmp	r1, r2
 8006694:	f100 33ff 	add.w	r3, r0, #4294967295
 8006698:	d100      	bne.n	800669c <memcpy+0xc>
 800669a:	4770      	bx	lr
 800669c:	b510      	push	{r4, lr}
 800669e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a6:	4291      	cmp	r1, r2
 80066a8:	d1f9      	bne.n	800669e <memcpy+0xe>
 80066aa:	bd10      	pop	{r4, pc}

080066ac <_realloc_r>:
 80066ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b0:	4607      	mov	r7, r0
 80066b2:	4614      	mov	r4, r2
 80066b4:	460d      	mov	r5, r1
 80066b6:	b921      	cbnz	r1, 80066c2 <_realloc_r+0x16>
 80066b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066bc:	4611      	mov	r1, r2
 80066be:	f7ff bc4d 	b.w	8005f5c <_malloc_r>
 80066c2:	b92a      	cbnz	r2, 80066d0 <_realloc_r+0x24>
 80066c4:	f7ff fbde 	bl	8005e84 <_free_r>
 80066c8:	4625      	mov	r5, r4
 80066ca:	4628      	mov	r0, r5
 80066cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066d0:	f000 f81a 	bl	8006708 <_malloc_usable_size_r>
 80066d4:	4284      	cmp	r4, r0
 80066d6:	4606      	mov	r6, r0
 80066d8:	d802      	bhi.n	80066e0 <_realloc_r+0x34>
 80066da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066de:	d8f4      	bhi.n	80066ca <_realloc_r+0x1e>
 80066e0:	4621      	mov	r1, r4
 80066e2:	4638      	mov	r0, r7
 80066e4:	f7ff fc3a 	bl	8005f5c <_malloc_r>
 80066e8:	4680      	mov	r8, r0
 80066ea:	b908      	cbnz	r0, 80066f0 <_realloc_r+0x44>
 80066ec:	4645      	mov	r5, r8
 80066ee:	e7ec      	b.n	80066ca <_realloc_r+0x1e>
 80066f0:	42b4      	cmp	r4, r6
 80066f2:	4622      	mov	r2, r4
 80066f4:	4629      	mov	r1, r5
 80066f6:	bf28      	it	cs
 80066f8:	4632      	movcs	r2, r6
 80066fa:	f7ff ffc9 	bl	8006690 <memcpy>
 80066fe:	4629      	mov	r1, r5
 8006700:	4638      	mov	r0, r7
 8006702:	f7ff fbbf 	bl	8005e84 <_free_r>
 8006706:	e7f1      	b.n	80066ec <_realloc_r+0x40>

08006708 <_malloc_usable_size_r>:
 8006708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800670c:	1f18      	subs	r0, r3, #4
 800670e:	2b00      	cmp	r3, #0
 8006710:	bfbc      	itt	lt
 8006712:	580b      	ldrlt	r3, [r1, r0]
 8006714:	18c0      	addlt	r0, r0, r3
 8006716:	4770      	bx	lr

08006718 <_init>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr

08006724 <_fini>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr
